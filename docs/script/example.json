[
	{
		"name": "String",
		"items": [
			{
				"comment": "/**\n * Dadas duas strings – sentença e delimitador –,\n * retorna uma string com os caracteres **posteriores\n * à primeira ocorrência** do delimitador na sentença.\n * Caso o delimitador não seja encontrado, retorna\n * uma string vazia.\n *\n * @category String\n * @param  {string} str\n * @param  {string} delimiter\n * @return {string}\n * @public\n *\n * @example\n * afterFirst(\"paralelepípedo\", \"le\");\n * // => \"lepípedo\"\n */",
				"meta": {
					"range": [
						499,
						584
					],
					"filename": "afterFirst.js",
					"lineno": 20,
					"path": "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist",
					"code": {
						"id": "astnode100000006",
						"name": "afterFirst",
						"type": "ArrowFunctionExpression"
					}
				},
				"description": "Dadas duas strings – sentença e delimitador –, retorna uma string com os caracteres **posteriores à primeira ocorrência** do delimitador na sentença. Caso o delimitador não seja encontrado, retorna uma string vazia.",
				"tags": [
					{
						"originalTitle": "category",
						"title": "category",
						"text": "String",
						"value": "String"
					}
				],
				"params": [
					{
						"type": {
							"names": [
								"string"
							]
						},
						"name": "str"
					},
					{
						"type": {
							"names": [
								"string"
							]
						},
						"name": "delimiter"
					}
				],
				"returns": [
					{
						"type": {
							"names": [
								"string"
							]
						}
					}
				],
				"access": "public",
				"examples": [
					"afterFirst(\"paralelepípedo\", \"le\");\n// => \"lepípedo\""
				],
				"name": "afterFirst",
				"longname": "afterFirst",
				"kind": "function",
				"scope": "global",
				"___id": "T000002R000002",
				"___s": true
			},
			{
				"comment": "/**\n * Dadas duas strings – sentença e delimitador –,\n * retorna uma string com os caracteres **posteriores\n * à última ocorrência** do delimitador na sentença.\n * Caso o delimitador não seja encontrado, retorna\n * uma string vazia.\n *\n * @category String\n * @param  {string} str\n * @param  {string} delimiter\n * @return {string}\n * @public\n *\n * @example\n * afterLast(\"paralelepípedo\", \"le\");\n * // => \"pípedo\"\n */",
				"meta": {
					"range": [
						494,
						577
					],
					"filename": "afterLast.js",
					"lineno": 20,
					"path": "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist",
					"code": {
						"id": "astnode100000025",
						"name": "afterLast",
						"type": "ArrowFunctionExpression"
					}
				},
				"description": "Dadas duas strings – sentença e delimitador –, retorna uma string com os caracteres **posteriores à última ocorrência** do delimitador na sentença. Caso o delimitador não seja encontrado, retorna uma string vazia.",
				"tags": [
					{
						"originalTitle": "category",
						"title": "category",
						"text": "String",
						"value": "String"
					}
				],
				"params": [
					{
						"type": {
							"names": [
								"string"
							]
						},
						"name": "str"
					},
					{
						"type": {
							"names": [
								"string"
							]
						},
						"name": "delimiter"
					}
				],
				"returns": [
					{
						"type": {
							"names": [
								"string"
							]
						}
					}
				],
				"access": "public",
				"examples": [
					"afterLast(\"paralelepípedo\", \"le\");\n// => \"pípedo\""
				],
				"name": "afterLast",
				"longname": "afterLast",
				"kind": "function",
				"scope": "global",
				"___id": "T000002R000004",
				"___s": true
			},
			{
				"comment": "/**\n * Dadas duas strings – sentença e delimitador –,\n * retorna uma string com os caracteres **anteriores\n * à primeira ocorrência** do delimitador na sentença.\n * Caso o delimitador não seja encontrado, retorna\n * uma string vazia.\n *\n * @category String\n * @param  {string} str\n * @param  {string} delimiter\n * @return {string}\n * @public\n *\n * @example\n * beforeFirst(\"paralelepípedo\", \"le\");\n * // => \"para\"\n */",
				"meta": {
					"range": [
						495,
						582
					],
					"filename": "beforeFirst.js",
					"lineno": 20,
					"path": "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist",
					"code": {
						"id": "astnode100000044",
						"name": "beforeFirst",
						"type": "ArrowFunctionExpression"
					}
				},
				"description": "Dadas duas strings – sentença e delimitador –, retorna uma string com os caracteres **anteriores à primeira ocorrência** do delimitador na sentença. Caso o delimitador não seja encontrado, retorna uma string vazia.",
				"tags": [
					{
						"originalTitle": "category",
						"title": "category",
						"text": "String",
						"value": "String"
					}
				],
				"params": [
					{
						"type": {
							"names": [
								"string"
							]
						},
						"name": "str"
					},
					{
						"type": {
							"names": [
								"string"
							]
						},
						"name": "delimiter"
					}
				],
				"returns": [
					{
						"type": {
							"names": [
								"string"
							]
						}
					}
				],
				"access": "public",
				"examples": [
					"beforeFirst(\"paralelepípedo\", \"le\");\n// => \"para\""
				],
				"name": "beforeFirst",
				"longname": "beforeFirst",
				"kind": "function",
				"scope": "global",
				"___id": "T000002R000006",
				"___s": true
			},
			{
				"comment": "/**\n * Dadas duas strings – sentença e delimitador –,\n * retorna uma string com os caracteres **anteriores\n * à última ocorrência** do delimitador na sentença.\n * Caso o delimitador não seja encontrado, retorna\n * uma string vazia.\n *\n * @category String\n * @param  {string} str\n * @param  {string} delimiter\n * @return {string}\n * @public\n *\n * @example\n * beforeLast(\"paralelepípedo\", \"le\");\n * // => \"parale\"\n */",
				"meta": {
					"range": [
						494,
						579
					],
					"filename": "beforeLast.js",
					"lineno": 20,
					"path": "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist",
					"code": {
						"id": "astnode100000063",
						"name": "beforeLast",
						"type": "ArrowFunctionExpression"
					}
				},
				"description": "Dadas duas strings – sentença e delimitador –, retorna uma string com os caracteres **anteriores à última ocorrência** do delimitador na sentença. Caso o delimitador não seja encontrado, retorna uma string vazia.",
				"tags": [
					{
						"originalTitle": "category",
						"title": "category",
						"text": "String",
						"value": "String"
					}
				],
				"params": [
					{
						"type": {
							"names": [
								"string"
							]
						},
						"name": "str"
					},
					{
						"type": {
							"names": [
								"string"
							]
						},
						"name": "delimiter"
					}
				],
				"returns": [
					{
						"type": {
							"names": [
								"string"
							]
						}
					}
				],
				"access": "public",
				"examples": [
					"beforeLast(\"paralelepípedo\", \"le\");\n// => \"parale\""
				],
				"name": "beforeLast",
				"longname": "beforeLast",
				"kind": "function",
				"scope": "global",
				"___id": "T000002R000008",
				"___s": true
			}
		]
	}
]