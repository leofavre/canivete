{
	"docs": [{
		"name": "Promise",
		"items": [{
			"comment": "/**\n * Atrasa o encadeamento de uma Promise por um tempo\n * determinado.\n * \n * @category Promise\n * @param  {number} [delay = 0] Tempo do atraso em milisegundos\n * @return {Promise}\n * @public\n *\n * @example\n * Promise.resolve(\"aguardando\")\n * \t.then(waitInPromise(500))\n * \t.then(console.log);\n *\n * // => \"aguardando\"\n * // mostrado depois de 500 milisegundos.\n */",
			"meta": {
				"range": [368, 572],
				"filename": "waitInPromise.js",
				"lineno": 18,
				"path": "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist",
				"code": {
					"id": "astnode100000077",
					"name": "waitInPromise",
					"type": "FunctionDeclaration",
					"paramnames": ["delay"]
				},
				"vars": {
					"": null
				}
			},
			"description": "Atrasa o encadeamento de uma Promise por um tempo determinado.",
			"tags": [{
				"originalTitle": "category",
				"title": "category",
				"text": "Promise",
				"value": "Promise"
			}],
			"params": [{
				"type": {
					"names": ["number"]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "Tempo do atraso em milisegundos",
				"name": "delay"
			}],
			"returns": [{
				"type": {
					"names": ["Promise"]
				}
			}],
			"access": "public",
			"examples": ["Promise.resolve(\"aguardando\")\n\t.then(waitInPromise(500))\n\t.then(console.log);\n\n// => \"aguardando\"\n// mostrado depois de 500 milisegundos."],
			"name": "waitInPromise",
			"longname": "waitInPromise",
			"kind": "function",
			"scope": "global",
			"___id": "T000002R000010",
			"___s": true,
			"href": "#waitInPromise",
			"signature": "waitInPromise(delay)"
		}]
	}, {
		"name": "String",
		"items": [{
			"comment": "/**\n * Dadas duas strings – sentença e delimitador –,\n * retorna uma string com os caracteres **posteriores\n * à primeira ocorrência** do delimitador na sentença.\n * Caso o delimitador não seja encontrado, retorna\n * uma string vazia.\n *\n * @category String\n * @param  {string} str Senteça\n * @param  {string} delimiter Delimitador\n * @return {string}\n * @public\n *\n * @example\n * afterFirst(\"paralelepípedo\", \"le\");\n *\n * // => \"lepípedo\"\n */",
			"meta": {
				"range": [522, 607],
				"filename": "afterFirst.js",
				"lineno": 21,
				"path": "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist",
				"code": {
					"id": "astnode100000006",
					"name": "afterFirst",
					"type": "ArrowFunctionExpression"
				}
			},
			"description": "Dadas duas strings – sentença e delimitador –, retorna uma string com os caracteres **posteriores à primeira ocorrência** do delimitador na sentença. Caso o delimitador não seja encontrado, retorna uma string vazia.",
			"tags": [{
				"originalTitle": "category",
				"title": "category",
				"text": "String",
				"value": "String"
			}],
			"params": [{
				"type": {
					"names": ["string"]
				},
				"description": "Senteça",
				"name": "str"
			}, {
				"type": {
					"names": ["string"]
				},
				"description": "Delimitador",
				"name": "delimiter"
			}],
			"returns": [{
				"type": {
					"names": ["string"]
				}
			}],
			"access": "public",
			"examples": ["afterFirst(\"paralelepípedo\", \"le\");\n\n// => \"lepípedo\""],
			"name": "afterFirst",
			"longname": "afterFirst",
			"kind": "function",
			"scope": "global",
			"___id": "T000002R000002",
			"___s": true,
			"href": "#afterFirst",
			"signature": "afterFirst(str, delimiter)"
		}, {
			"comment": "/**\n * Dadas duas strings – sentença e delimitador –,\n * retorna uma string com os caracteres **posteriores\n * à última ocorrência** do delimitador na sentença.\n * Caso o delimitador não seja encontrado, retorna\n * uma string vazia.\n *\n * @category String\n * @param  {string} str Senteça\n * @param  {string} delimiter Delimitador\n * @return {string}\n * @public\n *\n * @example\n * afterLast(\"paralelepípedo\", \"le\");\n *\n * // => \"pípedo\"\n */",
			"meta": {
				"range": [517, 600],
				"filename": "afterLast.js",
				"lineno": 21,
				"path": "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist",
				"code": {
					"id": "astnode100000025",
					"name": "afterLast",
					"type": "ArrowFunctionExpression"
				}
			},
			"description": "Dadas duas strings – sentença e delimitador –, retorna uma string com os caracteres **posteriores à última ocorrência** do delimitador na sentença. Caso o delimitador não seja encontrado, retorna uma string vazia.",
			"tags": [{
				"originalTitle": "category",
				"title": "category",
				"text": "String",
				"value": "String"
			}],
			"params": [{
				"type": {
					"names": ["string"]
				},
				"description": "Senteça",
				"name": "str"
			}, {
				"type": {
					"names": ["string"]
				},
				"description": "Delimitador",
				"name": "delimiter"
			}],
			"returns": [{
				"type": {
					"names": ["string"]
				}
			}],
			"access": "public",
			"examples": ["afterLast(\"paralelepípedo\", \"le\");\n\n// => \"pípedo\""],
			"name": "afterLast",
			"longname": "afterLast",
			"kind": "function",
			"scope": "global",
			"___id": "T000002R000004",
			"___s": true,
			"href": "#afterLast",
			"signature": "afterLast(str, delimiter)"
		}, {
			"comment": "/**\n * Dadas duas strings – sentença e delimitador –,\n * retorna uma string com os caracteres **anteriores\n * à primeira ocorrência** do delimitador na sentença.\n * Caso o delimitador não seja encontrado, retorna\n * uma string vazia.\n *\n * @category String\n * @param  {string} str Senteça\n * @param  {string} delimiter Delimitador\n * @return {string}\n * @public\n *\n * @example\n * beforeFirst(\"paralelepípedo\", \"le\");\n *\n * // => \"para\"\n */",
			"meta": {
				"range": [518, 605],
				"filename": "beforeFirst.js",
				"lineno": 21,
				"path": "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist",
				"code": {
					"id": "astnode100000044",
					"name": "beforeFirst",
					"type": "ArrowFunctionExpression"
				}
			},
			"description": "Dadas duas strings – sentença e delimitador –, retorna uma string com os caracteres **anteriores à primeira ocorrência** do delimitador na sentença. Caso o delimitador não seja encontrado, retorna uma string vazia.",
			"tags": [{
				"originalTitle": "category",
				"title": "category",
				"text": "String",
				"value": "String"
			}],
			"params": [{
				"type": {
					"names": ["string"]
				},
				"description": "Senteça",
				"name": "str"
			}, {
				"type": {
					"names": ["string"]
				},
				"description": "Delimitador",
				"name": "delimiter"
			}],
			"returns": [{
				"type": {
					"names": ["string"]
				}
			}],
			"access": "public",
			"examples": ["beforeFirst(\"paralelepípedo\", \"le\");\n\n// => \"para\""],
			"name": "beforeFirst",
			"longname": "beforeFirst",
			"kind": "function",
			"scope": "global",
			"___id": "T000002R000006",
			"___s": true,
			"href": "#beforeFirst",
			"signature": "beforeFirst(str, delimiter)"
		}, {
			"comment": "/**\n * Dadas duas strings – sentença e delimitador –,\n * retorna uma string com os caracteres **anteriores\n * à última ocorrência** do delimitador na sentença.\n * Caso o delimitador não seja encontrado, retorna\n * uma string vazia.\n *\n * @category String\n * @param  {string} str Senteça\n * @param  {string} delimiter Delimitador\n * @return {string}\n * @public\n *\n * @example\n * beforeLast(\"paralelepípedo\", \"le\");\n *\n * // => \"parale\"\n */",
			"meta": {
				"range": [517, 602],
				"filename": "beforeLast.js",
				"lineno": 21,
				"path": "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist",
				"code": {
					"id": "astnode100000063",
					"name": "beforeLast",
					"type": "ArrowFunctionExpression"
				}
			},
			"description": "Dadas duas strings – sentença e delimitador –, retorna uma string com os caracteres **anteriores à última ocorrência** do delimitador na sentença. Caso o delimitador não seja encontrado, retorna uma string vazia.",
			"tags": [{
				"originalTitle": "category",
				"title": "category",
				"text": "String",
				"value": "String"
			}],
			"params": [{
				"type": {
					"names": ["string"]
				},
				"description": "Senteça",
				"name": "str"
			}, {
				"type": {
					"names": ["string"]
				},
				"description": "Delimitador",
				"name": "delimiter"
			}],
			"returns": [{
				"type": {
					"names": ["string"]
				}
			}],
			"access": "public",
			"examples": ["beforeLast(\"paralelepípedo\", \"le\");\n\n// => \"parale\""],
			"name": "beforeLast",
			"longname": "beforeLast",
			"kind": "function",
			"scope": "global",
			"___id": "T000002R000008",
			"___s": true,
			"href": "#beforeLast",
			"signature": "beforeLast(str, delimiter)"
		}]
	}]
}
