{
  "docs": [
    {
      "comment": "/**\n * Given two strings, returns a new one formed\n * by the characters **after the first\n * occurrence** of the second string in the first.\n *\n * Returns an empty string if nothing is found.\n *\n * Note that non-string parameters will be converted\n * to string, which can lead to unexpected results.\n *\n * @category String\n * @param  {string} str The base string.\n * @param  {string} delimiter The string to be found.\n * @return {string}\n * @public\n *\n * @example\n * afterFirst(\"parallelepiped\", \"le\");\n *\n * // => \"lepiped\"\n */",
      "meta": {
        "range": [
          607,
          692
        ],
        "filename": "afterFirst.js",
        "lineno": 24,
        "path": "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist",
        "code": {
          "id": "astnode100000006",
          "name": "afterFirst",
          "type": "ArrowFunctionExpression"
        }
      },
      "description": "Given two strings, returns a new one formed\nby the characters **after the first\noccurrence** of the second string in the first.\n\nReturns an empty string if nothing is found.\n\nNote that non-string parameters will be converted\nto string, which can lead to unexpected results.",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The base string.",
          "name": "str"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The string to be found.",
          "name": "delimiter"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          }
        }
      ],
      "access": "public",
      "examples": [
        "afterFirst(\"parallelepiped\", \"le\");\n\n// => \"lepiped\""
      ],
      "name": "afterFirst",
      "longname": "afterFirst",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000002",
      "___s": true
    },
    {
      "comment": "/**\n * Given two strings, returns a new one formed\n * by the characters **after the last\n * occurrence** of the second string in the first.\n *\n * Returns an empty string if nothing is found.\n *\n * Note that non-string parameters will be converted\n * to string, which can lead to unexpected results.\n *\n * @category String\n * @param  {string} str The base string.\n * @param  {string} delimiter The string to be found.\n * @return {string}\n * @public\n *\n * @example\n * afterLast(\"parallelepiped\", \"le\");\n *\n * // => \"piped\"\n */",
      "meta": {
        "range": [
          603,
          686
        ],
        "filename": "afterLast.js",
        "lineno": 24,
        "path": "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist",
        "code": {
          "id": "astnode100000025",
          "name": "afterLast",
          "type": "ArrowFunctionExpression"
        }
      },
      "description": "Given two strings, returns a new one formed\nby the characters **after the last\noccurrence** of the second string in the first.\n\nReturns an empty string if nothing is found.\n\nNote that non-string parameters will be converted\nto string, which can lead to unexpected results.",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The base string.",
          "name": "str"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The string to be found.",
          "name": "delimiter"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          }
        }
      ],
      "access": "public",
      "examples": [
        "afterLast(\"parallelepiped\", \"le\");\n\n// => \"piped\""
      ],
      "name": "afterLast",
      "longname": "afterLast",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000004",
      "___s": true
    },
    {
      "comment": "/**\n * Given two strings, returns a new one formed\n * by the characters **before the first\n * occurrence** of the second string in the first.\n *\n * Returns an empty string if nothing is found.\n *\n * Note that non-string parameters will be converted\n * to string, which can lead to unexpected results.\n *\n * @category String\n * @param  {string} str The base string.\n * @param  {string} delimiter The string to be found.\n * @return {string}\n * @public\n *\n * @example\n * beforeFirst(\"parallelepiped\", \"le\");\n *\n * // => \"paral\"\n */",
      "meta": {
        "range": [
          607,
          694
        ],
        "filename": "beforeFirst.js",
        "lineno": 24,
        "path": "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist",
        "code": {
          "id": "astnode100000044",
          "name": "beforeFirst",
          "type": "ArrowFunctionExpression"
        }
      },
      "description": "Given two strings, returns a new one formed\nby the characters **before the first\noccurrence** of the second string in the first.\n\nReturns an empty string if nothing is found.\n\nNote that non-string parameters will be converted\nto string, which can lead to unexpected results.",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The base string.",
          "name": "str"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The string to be found.",
          "name": "delimiter"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          }
        }
      ],
      "access": "public",
      "examples": [
        "beforeFirst(\"parallelepiped\", \"le\");\n\n// => \"paral\""
      ],
      "name": "beforeFirst",
      "longname": "beforeFirst",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000006",
      "___s": true
    },
    {
      "comment": "/**\n * Given two strings, returns a new one formed\n * by the characters **before the last\n * occurrence** of the second string in the first.\n *\n * Returns an empty string if nothing is found.\n *\n * Note that non-string parameters will be converted\n * to string, which can lead to unexpected results.\n *\n * @category String\n * @param  {string} str The base string.\n * @param  {string} delimiter The string to be found.\n * @return {string}\n * @public\n *\n * @example\n * beforeLast(\"parallelepiped\", \"le\");\n *\n * // => \"paralle\"\n */",
      "meta": {
        "range": [
          607,
          692
        ],
        "filename": "beforeLast.js",
        "lineno": 24,
        "path": "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist",
        "code": {
          "id": "astnode100000063",
          "name": "beforeLast",
          "type": "ArrowFunctionExpression"
        }
      },
      "description": "Given two strings, returns a new one formed\nby the characters **before the last\noccurrence** of the second string in the first.\n\nReturns an empty string if nothing is found.\n\nNote that non-string parameters will be converted\nto string, which can lead to unexpected results.",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "String",
          "value": "String"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The base string.",
          "name": "str"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The string to be found.",
          "name": "delimiter"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          }
        }
      ],
      "access": "public",
      "examples": [
        "beforeLast(\"parallelepiped\", \"le\");\n\n// => \"paralle\""
      ],
      "name": "beforeLast",
      "longname": "beforeLast",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000008",
      "___s": true
    },
    {
      "comment": "/**\n * When used as the first parameter of\n * `Array.prototype.reduce()`, returns the average\n * of the items in an array.\n *\n * Note that reducing arrays with non-numeric values\n * using `toAverage()` can lead to unexpected results.\n *\n * @category Reduce\n * @return {number} The average of the values in an array.\n * @public\n *\n * @example\n * [3, 5, 7, 9].reduce(toAverage());\n * // => 6\n */",
      "meta": {
        "range": [
          400,
          617
        ],
        "filename": "toAverage.js",
        "lineno": 17,
        "path": "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist",
        "code": {
          "id": "astnode100000078",
          "name": "toAverage",
          "type": "ArrowFunctionExpression"
        },
        "vars": {
          "": null
        }
      },
      "description": "When used as the first parameter of\n`Array.prototype.reduce()`, returns the average\nof the items in an array.\n\nNote that reducing arrays with non-numeric values\nusing `toAverage()` can lead to unexpected results.",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Reduce",
          "value": "Reduce"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The average of the values in an array."
        }
      ],
      "access": "public",
      "examples": [
        "[3, 5, 7, 9].reduce(toAverage());\n// => 6"
      ],
      "name": "toAverage",
      "longname": "toAverage",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000010",
      "___s": true
    },
    {
      "comment": "/**\n * Given a property path\n * \n * This function is curried so as to be used as the\n * first parameter of `Array.prototype.reduce()`.\n *\n * Note that this function considers that all objects in\n * the array have the same set of properties.\n *\n * @category Reduce\n * @param {string} path The path to the property of an object\n * @return {object} The object in which an specified property has the closest value to the average\n * @public\n *\n * @example\n * var cities = [{\n * \tcity: \"Rio de Janeiro\",\n * \ttemperature: 96,\n * \tdemographics: {\n * \t\tpopulation: 6.32\n * \t}\n * }, {\n * \tcity: \"São Paulo\",\n * \ttemperature: 82.5,\n * \tdemographics: {\n * \t\tpopulation: 12.04\n * \t}\n * }, {\n * \tcity: \"Curitiba\",\n * \ttemperature: 70,\n * \tdemographics: {\n * \t\tpopulation: 1.752\n * \t}\n * }, {\n * \tcity: \"Florianópolis\",\n * \ttemperature: 86,\n * \tdemographics: {\n * \t\tpopulation: 0.249\n * \t}\n * }];\n *\n * // cities.reduce(toAverageProp(\"temperature\"));\n * // => { city: \"São Paulo\", [...] }\n *\n * // cities.reduce(toAverageProp(\"demographics.population\"));\n * // => { city: \"Rio de Janeiro\", [...] }\n */",
      "meta": {
        "range": [
          1178,
          1495
        ],
        "filename": "toAverageProp.js",
        "lineno": 51,
        "path": "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist",
        "code": {
          "id": "astnode100000126",
          "name": "toAverageProp",
          "type": "ArrowFunctionExpression"
        },
        "vars": {
          "average": "toAverageProp~average",
          "": null
        }
      },
      "description": "Given a property path\n\nThis function is curried so as to be used as the\nfirst parameter of `Array.prototype.reduce()`.\n\nNote that this function considers that all objects in\nthe array have the same set of properties.",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Reduce",
          "value": "Reduce"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The path to the property of an object",
          "name": "path"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "The object in which an specified property has the closest value to the average"
        }
      ],
      "access": "public",
      "examples": [
        "var cities = [{\n\tcity: \"Rio de Janeiro\",\n\ttemperature: 96,\n\tdemographics: {\n\t\tpopulation: 6.32\n\t}\n}, {\n\tcity: \"São Paulo\",\n\ttemperature: 82.5,\n\tdemographics: {\n\t\tpopulation: 12.04\n\t}\n}, {\n\tcity: \"Curitiba\",\n\ttemperature: 70,\n\tdemographics: {\n\t\tpopulation: 1.752\n\t}\n}, {\n\tcity: \"Florianópolis\",\n\ttemperature: 86,\n\tdemographics: {\n\t\tpopulation: 0.249\n\t}\n}];\n\n// cities.reduce(toAverageProp(\"temperature\"));\n// => { city: \"São Paulo\", [...] }\n\n// cities.reduce(toAverageProp(\"demographics.population\"));\n// => { city: \"Rio de Janeiro\", [...] }"
      ],
      "name": "toAverageProp",
      "longname": "toAverageProp",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000013",
      "___s": true
    },
    {
      "comment": "/**\n * When used as the first parameter of\n * `Array.prototype.reduce()`, returns the first\n * item the has the closest value to the one\n * specified as a parameter.\n *\n * Note that reducing arrays with non-numeric values\n * using `toClosest()` can lead to unexpected results.\n *\n * @category Reduce\n * @param {number} num The value to be compared with.\n * @return {number} The value in an array which is the closest to the compared value.\n * @public\n *\n * @example\n * [3, 5, 7, 9].reduce(toClosest(6));\n * // => 5\n *\n * [3, 5, 7, 9].reduce(toClosest(-2));\n * // => 3\n */",
      "meta": {
        "range": [
          578,
          731
        ],
        "filename": "toClosest.js",
        "lineno": 22,
        "path": "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist",
        "code": {
          "id": "astnode100000199",
          "name": "toClosest",
          "type": "ArrowFunctionExpression"
        },
        "vars": {
          "": null
        }
      },
      "description": "When used as the first parameter of\n`Array.prototype.reduce()`, returns the first\nitem the has the closest value to the one\nspecified as a parameter.\n\nNote that reducing arrays with non-numeric values\nusing `toClosest()` can lead to unexpected results.",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Reduce",
          "value": "Reduce"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The value to be compared with.",
          "name": "num"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The value in an array which is the closest to the compared value."
        }
      ],
      "access": "public",
      "examples": [
        "[3, 5, 7, 9].reduce(toClosest(6));\n// => 5\n\n[3, 5, 7, 9].reduce(toClosest(-2));\n// => 3"
      ],
      "name": "toClosest",
      "longname": "toClosest",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000017",
      "___s": true
    },
    {
      "comment": "/**\n * When used as the first parameter of\n * `Array.prototype.reduce()`, returns the sum\n * of the items in an array.\n *\n * Note that reducing arrays with non-numeric values\n * using `toSum()` can lead to unexpected results.\n *\n * @category Reduce\n * @return {number} The sum of the values in an array.\n * @public\n *\n * @example\n * [3, 5, 7, 9].reduce(toSum());\n * // => 24\n */",
      "meta": {
        "range": [
          385,
          438
        ],
        "filename": "toSum.js",
        "lineno": 17,
        "path": "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist",
        "code": {
          "id": "astnode100000359",
          "name": "toSum",
          "type": "ArrowFunctionExpression"
        },
        "vars": {
          "": null
        }
      },
      "description": "When used as the first parameter of\n`Array.prototype.reduce()`, returns the sum\nof the items in an array.\n\nNote that reducing arrays with non-numeric values\nusing `toSum()` can lead to unexpected results.",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Reduce",
          "value": "Reduce"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The sum of the values in an array."
        }
      ],
      "access": "public",
      "examples": [
        "[3, 5, 7, 9].reduce(toSum());\n// => 24"
      ],
      "name": "toSum",
      "longname": "toSum",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000025",
      "___s": true
    },
    {
      "comment": "/**\n * Delays the chaining of a Promise by a specified\n * time in milliseconds.\n *\n * This function is curried so as to be used inside\n * the `.then()` method, passing along the resolved\n * value of the previous Promise step to the next.\n *\n * If a non-numeric parameter is passed, the Promise\n * resolves without delay, skipping the internal\n * `setTimeout()`.\n * \n * @category Promise\n * @param  {number} delay Delay in milliseconds\n * @return {Promise} Resolved value from the previous step\n * @public\n *\n * @example\n * Promise.resolve(\"waiting\")\n * \t.then(waitInPromise(500))\n * \t.then(console.log);\n *\n * // => \"waiting\"\n * // shown after 500ms\n */",
      "meta": {
        "range": [
          708,
          921
        ],
        "filename": "waitInPromise.js",
        "lineno": 28,
        "path": "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist",
        "code": {
          "id": "astnode100000375",
          "name": "waitInPromise",
          "type": "FunctionDeclaration",
          "paramnames": [
            "delay"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Delays the chaining of a Promise by a specified\ntime in milliseconds.\n\nThis function is curried so as to be used inside\nthe `.then()` method, passing along the resolved\nvalue of the previous Promise step to the next.\n\nIf a non-numeric parameter is passed, the Promise\nresolves without delay, skipping the internal\n`setTimeout()`.",
      "tags": [
        {
          "originalTitle": "category",
          "title": "category",
          "text": "Promise",
          "value": "Promise"
        }
      ],
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Delay in milliseconds",
          "name": "delay"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "Resolved value from the previous step"
        }
      ],
      "access": "public",
      "examples": [
        "Promise.resolve(\"waiting\")\n\t.then(waitInPromise(500))\n\t.then(console.log);\n\n// => \"waiting\"\n// shown after 500ms"
      ],
      "name": "waitInPromise",
      "longname": "waitInPromise",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000027",
      "___s": true
    },
    {
      "kind": "package",
      "longname": "package:undefined",
      "files": [
        "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist/afterFirst.js",
        "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist/afterLast.js",
        "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist/beforeFirst.js",
        "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist/beforeLast.js",
        "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist/toAverage.js",
        "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist/toAverageProp.js",
        "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist/toClosest.js",
        "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist/toClosestProp.js",
        "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist/toLargestProp.js",
        "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist/toSmallestProp.js",
        "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist/toSum.js",
        "/Users/leonardofavre/Dropbox (Pessoal)/Websites/websites/canivete/dist/waitInPromise.js"
      ],
      "___id": "T000002R000029",
      "___s": true
    }
  ]
}