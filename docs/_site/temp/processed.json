{"docs":[{"name":"BEM","href":"bem","items":[{"comment":"/**\n * Formats a CSS class according to the\n * [BEM methodology](https://en.bem.info/methodology/).\n * The function receives a block, an element, a modifier, a value\n * for the modifier and an array of BEM delimiters, e.g. `__`,\n * `--` and `-`.\n * \n * @category BEM\n *\n * @param  {string} block The BEM block.\n * @param  {string} [element] The BEM element.\n * @param  {string} [modifier] The BEM modifier.\n * @param  {(string|number|boolean)} [value = true] The BEM modifier value.\n * @param  {Array.<string>} delimiters The BEM delimiters.\n * @return {string} The BEM CSS class.\n *\n * @example\n * let delimiters = [\"__\", \"--\", \"-\"];\n * \n * formatBemClass(\"menu\", delimiters);\n * // => \"menu\"\n * \n * formatBemClass(\"menu\", \"item\", delimiters);\n * // => \"menu__item\"\n * \n * formatBemClass(\"menu\", \"item\", \"active\", delimiters);\n * // => \"menu__item--active\"\n * \n * formatBemClass(\"menu\", \"item\", \"active\", false, delimiters);\n * // => \"menu__item\"\n * \n * formatBemClass(\"menu\", \"item\", \"active\", true, delimiters);\n * // => \"menu__item--active\"\n * \n * formatBemClass(\"menu\", \"item\", \"level\", 42, delimiters);\n * // => \"menu__item--level-42\"\n * \n * formatBemClass(\"menu\", \"item\", \"level\", \"42\", delimiters);\n * // => \"menu__item--level-42\"\n *\n * @example\n * let delimiters = [\"__\", \"--\", \"-\"];\n * \n * formatBemClass(\"button\", null, \"active\", delimiters);\n * // => \"button--active\"\n * \n * formatBemClass(\"button\", null, \"active\", false, delimiters);\n * // => \"button\"\n * \n * formatBemClass(\"button\", null, \"active\", true, delimiters);\n * // => \"button--active\"\n * \n * formatBemClass(\"button\", null, \"level\", 42, delimiters);\n * // => \"button--level-42\"\n * \n * formatBemClass(\"button\", null, \"level\", \"42\", delimiters);\n * // => \"button--level-42\"\n */","meta":{"range":[1955,2573],"filename":"formatBemClass.js","lineno":63,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100000354","name":"formatBemClass","type":"ArrowFunctionExpression"},"vars":{"block":"formatBemClass~block","delimiters":"formatBemClass~delimiters","element":"formatBemClass~element","modifier":"formatBemClass~modifier","value":"formatBemClass~value","radical":"formatBemClass~radical","classModifier":"formatBemClass~classModifier"}},"description":"Formats a CSS class according to the\n[BEM methodology](https://en.bem.info/methodology/).\nThe function receives a block, an element, a modifier, a value\nfor the modifier and an array of BEM delimiters, e.g. `__`,\n`--` and `-`.","tags":[{"originalTitle":"category","title":"category","text":"BEM","value":"BEM"}],"params":[{"type":{"names":["string"]},"description":"The BEM block.","name":"block"},{"type":{"names":["string"]},"optional":true,"description":"The BEM element.","name":"element"},{"type":{"names":["string"]},"optional":true,"description":"The BEM modifier.","name":"modifier"},{"type":{"names":["string","number","boolean"]},"optional":true,"defaultvalue":true,"description":"The BEM modifier value.","name":"value"},{"type":{"names":["Array.<string>"]},"description":"The BEM delimiters.","name":"delimiters"}],"returns":[{"type":{"names":["string"]},"description":"The BEM CSS class."}],"examples":["let delimiters = [\"__\", \"--\", \"-\"];\n\nformatBemClass(\"menu\", delimiters);\n// => \"menu\"\n\nformatBemClass(\"menu\", \"item\", delimiters);\n// => \"menu__item\"\n\nformatBemClass(\"menu\", \"item\", \"active\", delimiters);\n// => \"menu__item--active\"\n\nformatBemClass(\"menu\", \"item\", \"active\", false, delimiters);\n// => \"menu__item\"\n\nformatBemClass(\"menu\", \"item\", \"active\", true, delimiters);\n// => \"menu__item--active\"\n\nformatBemClass(\"menu\", \"item\", \"level\", 42, delimiters);\n// => \"menu__item--level-42\"\n\nformatBemClass(\"menu\", \"item\", \"level\", \"42\", delimiters);\n// => \"menu__item--level-42\"","let delimiters = [\"__\", \"--\", \"-\"];\n\nformatBemClass(\"button\", null, \"active\", delimiters);\n// => \"button--active\"\n\nformatBemClass(\"button\", null, \"active\", false, delimiters);\n// => \"button\"\n\nformatBemClass(\"button\", null, \"active\", true, delimiters);\n// => \"button--active\"\n\nformatBemClass(\"button\", null, \"level\", 42, delimiters);\n// => \"button--level-42\"\n\nformatBemClass(\"button\", null, \"level\", \"42\", delimiters);\n// => \"button--level-42\""],"name":"formatBemClass","longname":"formatBemClass","kind":"function","scope":"global","___id":"T000002R000026","___s":true,"href":"formatbemclass","paramsTable":["| Name | Default | Type | Description |","| --- | --- | --- | --- |","| `block` |  | String | The BEM block. |","| `element` |  | String | The BEM element. **optional** |","| `modifier` |  | String | The BEM modifier. **optional** |","| `value` | `true` | String<br>Number<br>Boolean | The BEM modifier value. **optional** |","| `delimiters` |  | Array.&lt;String&gt; | The BEM delimiters. |"],"returnsTable":["| Type | Description |","| --- | --- |","| String | The BEM CSS class. |"],"signature":"formatBemClass (block, [element], [modifier], [value], delimiters)"},{"comment":"/**\n * Modifies the CSS classes from a DOM element according\n * to the [BEM methodology](https://en.bem.info/methodology/).\n *\n * @category BEM\n *\n * @param  {HTMLElement} domEl The DOM element.\n * @param  {BemObject} bemObj The object describing BEM class changes (see table below).\n * @param  {Array} delimiters The BEM delimiters.\n *\n * @example\n * let domEl = document.createElement(\"div\"),\n * \tdelimiters = [\"__\", \"--\", \"-\"];\n *\n * modifyBemClass(domEl, {\n * \t\"swiper\": {\n * \t\t\"slides\": 5,\n * \t\t\"current\": 2,\n * \t\t\"playing\": true\n * \t}\n * }, delimiters);\n *\n * domEl.className;\n * // => \"swiper swiper--slides-5 swiper--current-2 swiper--playing\"\n *\n * modifyBemClass(domEl, {\n * \t\"swiper\": {\n * \t\t\"current\": 3,\n * \t\t\"playing\": false\n * \t}\n * }, delimiters);\n *\n * domEl.className;\n * // => \"swiper swiper--slides-5 swiper--current-3\"\n */","meta":{"range":[1268,1428],"filename":"modifyBemClass.js","lineno":45,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100000974","name":"modifyBemClass","type":"ArrowFunctionExpression"}},"description":"Modifies the CSS classes from a DOM element according\nto the [BEM methodology](https://en.bem.info/methodology/).","tags":[{"originalTitle":"category","title":"category","text":"BEM","value":"BEM"}],"params":[{"type":{"names":["HTMLElement"]},"description":"The DOM element.","name":"domEl"},{"type":{"names":["BemObject"]},"description":"The object describing BEM class changes (see table below).","name":"bemObj"},{"type":{"names":["Array"]},"description":"The BEM delimiters.","name":"delimiters"}],"examples":["let domEl = document.createElement(\"div\"),\n\tdelimiters = [\"__\", \"--\", \"-\"];\n\nmodifyBemClass(domEl, {\n\t\"swiper\": {\n\t\t\"slides\": 5,\n\t\t\"current\": 2,\n\t\t\"playing\": true\n\t}\n}, delimiters);\n\ndomEl.className;\n// => \"swiper swiper--slides-5 swiper--current-2 swiper--playing\"\n\nmodifyBemClass(domEl, {\n\t\"swiper\": {\n\t\t\"current\": 3,\n\t\t\"playing\": false\n\t}\n}, delimiters);\n\ndomEl.className;\n// => \"swiper swiper--slides-5 swiper--current-3\""],"name":"modifyBemClass","longname":"modifyBemClass","kind":"function","scope":"global","___id":"T000002R000095","___s":true,"href":"modifybemclass","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `domEl` | HTMLElement | The DOM element. |","| `bemObj` | BemObject | The object describing BEM class changes (see table below). |","| `delimiters` | Array | The BEM delimiters. |"],"signature":"modifyBemClass (domEl, bemObj, delimiters)","typedefParams":["BemObject"]},{"comment":"/**\n * Modifies the CSS classes from a DOM element according\n * to the [BEM methodology](https://en.bem.info/methodology/).\n * Unlike [`modifyBemClass()`](#modifybemclass), it ommits the original block\n * or element CSS class if a modified version is output.\n *\n * @category BEM\n *\n * @param  {HTMLElement} domEl The DOM element.\n * @param  {BemObject} bemObj The object describing BEM class changes (see table below).\n * @param  {Array} delimiters The BEM delimiters.\n *\n * @example\n * let domEl = document.createElement(\"div\"),\n * \tdelimiters = [\"__\", \"--\", \"-\"];\n *\n * modifyBemClassCompact(domEl, {\n * \t\"swiper\": {\n * \t\t\"slides\": 5,\n * \t\t\"current\": 2,\n * \t\t\"playing\": true\n * \t}\n * }, delimiters);\n *\n * domEl.className;\n * // => \"swiper--slides-5 swiper--current-2 swiper--playing\"\n *\n * modifyBemClassCompact(domEl, {\n * \t\"swiper\": {\n * \t\t\"current\": 3,\n * \t\t\"playing\": false\n * \t}\n * }, delimiters);\n *\n * domEl.className;\n * // => \"swiper--slides-5 swiper--current-3\"\n */","meta":{"range":[1122,1290],"filename":"modifyBemClassCompact.js","lineno":41,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100001007","name":"modifyBemClassCompact","type":"ArrowFunctionExpression"}},"description":"Modifies the CSS classes from a DOM element according\nto the [BEM methodology](https://en.bem.info/methodology/).\nUnlike [`modifyBemClass()`](#modifybemclass), it ommits the original block\nor element CSS class if a modified version is output.","tags":[{"originalTitle":"category","title":"category","text":"BEM","value":"BEM"}],"params":[{"type":{"names":["HTMLElement"]},"description":"The DOM element.","name":"domEl"},{"type":{"names":["BemObject"]},"description":"The object describing BEM class changes (see table below).","name":"bemObj"},{"type":{"names":["Array"]},"description":"The BEM delimiters.","name":"delimiters"}],"examples":["let domEl = document.createElement(\"div\"),\n\tdelimiters = [\"__\", \"--\", \"-\"];\n\nmodifyBemClassCompact(domEl, {\n\t\"swiper\": {\n\t\t\"slides\": 5,\n\t\t\"current\": 2,\n\t\t\"playing\": true\n\t}\n}, delimiters);\n\ndomEl.className;\n// => \"swiper--slides-5 swiper--current-2 swiper--playing\"\n\nmodifyBemClassCompact(domEl, {\n\t\"swiper\": {\n\t\t\"current\": 3,\n\t\t\"playing\": false\n\t}\n}, delimiters);\n\ndomEl.className;\n// => \"swiper--slides-5 swiper--current-3\""],"name":"modifyBemClassCompact","longname":"modifyBemClassCompact","kind":"function","scope":"global","___id":"T000002R000097","___s":true,"href":"modifybemclasscompact","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `domEl` | HTMLElement | The DOM element. |","| `bemObj` | BemObject | The object describing BEM class changes (see table below). |","| `delimiters` | Array | The BEM delimiters. |"],"signature":"modifyBemClassCompact (domEl, bemObj, delimiters)","typedefParams":["BemObject"]}]},{"name":"ClassName","href":"classname","items":[{"comment":"/**\n * Adds a CSS class to one or more DOM elements.\n *\n * @category ClassName\n * \n * @param  {(HTMLElement|HTMLCollection|NodeList|Array.<HTMLElement>|Set.<HTMLElement>)} domEls One or more DOM elements.\n * @param  {string} className The CSS class name.\n *\n * @example\n * let oneElement = document.querySelector(\"a\");\n * addClass(oneElement, \"link\");\n * \n * oneElement.className;\n * // => \"link\"\n * \n * @example\n * let manyElements = document.querySelectorAll(\"a\");\n * addClass(manyElements, \"link\");\n *\n * manyElements[0].className;\n * // => \"link\"\n */","meta":{"range":[714,847],"filename":"addClass.js","lineno":26,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100000011","name":"addClass","type":"ArrowFunctionExpression"},"vars":{"":null}},"description":"Adds a CSS class to one or more DOM elements.","tags":[{"originalTitle":"category","title":"category","text":"ClassName","value":"ClassName"}],"params":[{"type":{"names":["HTMLElement","HTMLCollection","NodeList","Array.<HTMLElement>","Set.<HTMLElement>"]},"description":"One or more DOM elements.","name":"domEls"},{"type":{"names":["string"]},"description":"The CSS class name.","name":"className"}],"examples":["let oneElement = document.querySelector(\"a\");\naddClass(oneElement, \"link\");\n\noneElement.className;\n// => \"link\"","let manyElements = document.querySelectorAll(\"a\");\naddClass(manyElements, \"link\");\n\nmanyElements[0].className;\n// => \"link\""],"name":"addClass","longname":"addClass","kind":"function","scope":"global","___id":"T000002R000002","___s":true,"href":"addclass","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `domEls` | HTMLElement<br>HTMLCollection<br>NodeList<br>Array.&lt;HTMLElement&gt;<br>Set.&lt;HTMLElement&gt; | One or more DOM elements. |","| `className` | String | The CSS class name. |"],"signature":"addClass (domEls, className)"},{"comment":"/**\n * Verifies if a DOM element has a CSS class.\n *\n * @category ClassName\n *\n * @param  {HTMLElement} domEl The DOM element.\n * @param  {string} className The CSS class name.\n * @return {boolean} Whether the element has the CSS class name.\n *\n * @example\n * let oneElement = document.querySelector(\"a\");\n * oneElement.className = \"link reference\";\n * \n * hasClass(oneElement, \"link\");\n * // => true\n * \n * hasClass(oneElement, \"button\");\n * // => false\n */","meta":{"range":[587,748],"filename":"hasClass.js","lineno":23,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100000889","name":"hasClass","type":"ArrowFunctionExpression"}},"description":"Verifies if a DOM element has a CSS class.","tags":[{"originalTitle":"category","title":"category","text":"ClassName","value":"ClassName"}],"params":[{"type":{"names":["HTMLElement"]},"description":"The DOM element.","name":"domEl"},{"type":{"names":["string"]},"description":"The CSS class name.","name":"className"}],"returns":[{"type":{"names":["boolean"]},"description":"Whether the element has the CSS class name."}],"examples":["let oneElement = document.querySelector(\"a\");\noneElement.className = \"link reference\";\n\nhasClass(oneElement, \"link\");\n// => true\n\nhasClass(oneElement, \"button\");\n// => false"],"name":"hasClass","longname":"hasClass","kind":"function","scope":"global","___id":"T000002R000088","___s":true,"href":"hasclass","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `domEl` | HTMLElement | The DOM element. |","| `className` | String | The CSS class name. |"],"returnsTable":["| Type | Description |","| --- | --- |","| Boolean | Whether the element has the CSS class name. |"],"signature":"hasClass (domEl, className)"},{"comment":"/**\n * Removes a CSS class from one or more DOM elements.\n *\n * @category ClassName\n *\n * @param  {(HTMLElement|HTMLCollection|NodeList|Array.<HTMLElement>|Set.<HTMLElement>)} domEls One or more DOM elements.\n * @param  {string} className The CSS class name.\n *\n * @example\n * let oneElement = document.querySelector(\".link.base\");\n * removeClass(oneElement, \"link\");\n * \n * oneElement.className;\n * // => \"base\"\n * \n * @example\n * let manyElements = document.querySelectorAll(\".link.base\");\n * removeClass(manyElements, \"link\");\n *\n * manyElements[0].className;\n * // => \"base\"\n */","meta":{"range":[742,881],"filename":"removeClass.js","lineno":26,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100001199","name":"removeClass","type":"ArrowFunctionExpression"},"vars":{"":null}},"description":"Removes a CSS class from one or more DOM elements.","tags":[{"originalTitle":"category","title":"category","text":"ClassName","value":"ClassName"}],"params":[{"type":{"names":["HTMLElement","HTMLCollection","NodeList","Array.<HTMLElement>","Set.<HTMLElement>"]},"description":"One or more DOM elements.","name":"domEls"},{"type":{"names":["string"]},"description":"The CSS class name.","name":"className"}],"examples":["let oneElement = document.querySelector(\".link.base\");\nremoveClass(oneElement, \"link\");\n\noneElement.className;\n// => \"base\"","let manyElements = document.querySelectorAll(\".link.base\");\nremoveClass(manyElements, \"link\");\n\nmanyElements[0].className;\n// => \"base\""],"name":"removeClass","longname":"removeClass","kind":"function","scope":"global","___id":"T000002R000108","___s":true,"href":"removeclass","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `domEls` | HTMLElement<br>HTMLCollection<br>NodeList<br>Array.&lt;HTMLElement&gt;<br>Set.&lt;HTMLElement&gt; | One or more DOM elements. |","| `className` | String | The CSS class name. |"],"signature":"removeClass (domEls, className)"}]},{"name":"Collection","href":"collection","items":[{"comment":"/**\n * Groups the contents of an array by one or more iteratees.\n * This function is similar to Lodash\n * [`groupBy()`](https://lodash.com/docs/4.17.4#groupBy),\n * except it can create nested groups but cannot receive\n * strings for iteratees.\n *\n * @category Collection\n * \n * @param  {Array} collection The original array.\n * @param  {...Function} [...iteratees] The functions used to group the array of objects by their results.\n * @return {Object} The resulting object.\n *\n * @example\n *\n * const getLength = str => str.length;\n * const getFirstLetter = str => str.slice(0, 1);\n *\n * deepGroupBy([\"one\", \"two\", \"three\"], getLength, getFirstLetter);\n * // => {\n * // => \t\"3\": {\"o\": [\"one\"], \"t\": [\"two\"]},\n * // => \t\"5\": {\"t\": [\"three\"]}\n * // => }\n * \n * @example\n *\n * const getLength = str => str.length;\n * const getFirstLetter = str => str.slice(0, 1);\n *\n * deepGroupBy([\"one\", \"two\", \"three\"], getFirstLetter, getLength);\n * // => {\n * // => \t\"o\": {\"3\": [\"one\"]},\n * // => \t\"t\": {\"3\": [\"two\"], \"5\": [\"three\"]}\n * // => }\n *\n * @example\n *\n * const stores = [{\n * \t\"name\": \"Iguatemi\",\n * \t\"city\": \"Campinas\",\n * \t\"state\": \"SP\"\n * }, {\n * \t\"name\": \"Jardins\",\n * \t\"city\": \"São Paulo\",\n * \t\"state\": \"SP\"\n * }, {\n * \t\"name\": \"Iguatemi\",\n * \t\"city\": \"São Paulo\",\n * \t\"state\": \"SP\"\n * }, {\n * \t\"name\": \"Pedras\",\n * \t\"city\": \"Búzios\",\n * \t\"state\": \"RJ\"\n * }, {\n * \t\"name\": \"Ipanema\",\n * \t\"city\": \"Rio de Janeiro\",\n * \t\"state\": \"RJ\"\n * }, {\n * \t\"name\": \"Leblon\",\n * \t\"city\": \"Rio de Janeiro\",\n * \t\"state\": \"RJ\"\n * }, {\n * \t\"name\": \"ParkShopping\",\n * \t\"city\": \"Brasília\",\n * \t\"state\": \"DF\"\n * }];\n * \n * const getStateName = item => item.state;\n * const getCityName = item => item.city;\n *\n * deepGroupBy(stores, getStateName, getCityName);\n * // => {\n * // => \t\"SP\": { \"Campinas\": [...], \"São Paulo\": [...] },\n * // => \t\"RJ\": { \"Búzios\": [...], \"Rio de Janeiro\": [...] },\n * // => \t\"DF\": { \"Brasília\": [...] }\n * // => }\n */","meta":{"range":[2043,2391],"filename":"deepGroupBy.js","lineno":81,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100000187","name":"deepGroupBy","type":"ArrowFunctionExpression"},"vars":{"paths":"deepGroupBy~paths","":null,"result":"deepGroupBy~result"}},"description":"Groups the contents of an array by one or more iteratees.\nThis function is similar to Lodash\n[`groupBy()`](https://lodash.com/docs/4.17.4#groupBy),\nexcept it can create nested groups but cannot receive\nstrings for iteratees.","tags":[{"originalTitle":"category","title":"category","text":"Collection","value":"Collection"}],"params":[{"type":{"names":["Array"]},"description":"The original array.","name":"collection"},{"type":{"names":["function"]},"optional":true,"variable":true,"description":"The functions used to group the array of objects by their results.","name":"...iteratees"}],"returns":[{"type":{"names":["Object"]},"description":"The resulting object."}],"examples":["const getLength = str => str.length;\nconst getFirstLetter = str => str.slice(0, 1);\n\ndeepGroupBy([\"one\", \"two\", \"three\"], getLength, getFirstLetter);\n// => {\n// => \t\"3\": {\"o\": [\"one\"], \"t\": [\"two\"]},\n// => \t\"5\": {\"t\": [\"three\"]}\n// => }","const getLength = str => str.length;\nconst getFirstLetter = str => str.slice(0, 1);\n\ndeepGroupBy([\"one\", \"two\", \"three\"], getFirstLetter, getLength);\n// => {\n// => \t\"o\": {\"3\": [\"one\"]},\n// => \t\"t\": {\"3\": [\"two\"], \"5\": [\"three\"]}\n// => }","const stores = [{\n\t\"name\": \"Iguatemi\",\n\t\"city\": \"Campinas\",\n\t\"state\": \"SP\"\n}, {\n\t\"name\": \"Jardins\",\n\t\"city\": \"São Paulo\",\n\t\"state\": \"SP\"\n}, {\n\t\"name\": \"Iguatemi\",\n\t\"city\": \"São Paulo\",\n\t\"state\": \"SP\"\n}, {\n\t\"name\": \"Pedras\",\n\t\"city\": \"Búzios\",\n\t\"state\": \"RJ\"\n}, {\n\t\"name\": \"Ipanema\",\n\t\"city\": \"Rio de Janeiro\",\n\t\"state\": \"RJ\"\n}, {\n\t\"name\": \"Leblon\",\n\t\"city\": \"Rio de Janeiro\",\n\t\"state\": \"RJ\"\n}, {\n\t\"name\": \"ParkShopping\",\n\t\"city\": \"Brasília\",\n\t\"state\": \"DF\"\n}];\n\nconst getStateName = item => item.state;\nconst getCityName = item => item.city;\n\ndeepGroupBy(stores, getStateName, getCityName);\n// => {\n// => \t\"SP\": { \"Campinas\": [...], \"São Paulo\": [...] },\n// => \t\"RJ\": { \"Búzios\": [...], \"Rio de Janeiro\": [...] },\n// => \t\"DF\": { \"Brasília\": [...] }\n// => }"],"name":"deepGroupBy","longname":"deepGroupBy","kind":"function","scope":"global","___id":"T000002R000017","___s":true,"href":"deepgroupby","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `collection` | Array | The original array. |","| `...iteratees` | Function | The functions used to group the array of objects by their results. **optional** |"],"returnsTable":["| Type | Description |","| --- | --- |","| Object | The resulting object. |"],"signature":"deepGroupBy (collection, [...iteratees])"}]},{"name":"DOM","href":"dom","items":[{"comment":"/**\n * Gets a DOM element attribute using native\n * [`Element.getAttribute()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute),\n * except that the presence of an attribute without\n * a value will return `true` instead of an empty string,\n * and the absence will return `false`. The function also\n * deals with boolean values using old HTML4 syntax,\n * like `<option selected=\"selected\">`.\n *\n * @category DOM\n * \n * @param  {HTMLElement} domEl The DOM element.\n * @param  {string} attrName The attribute name.\n * @return {(string|Boolean)} The attribute value.\n *\n * @example\n * // HTML5 syntax\n * let inputElement = createDomElement('<input type=\"checkbox\" checked>');\n *\n * getAttr(inputElement, \"checked\");\n * // => true\n *\n * @example\n * // HTML4 syntax\n * let inputElement = createDomElement('<input type=\"checkbox\" checked=\"checked\"/>');\n *\n * getAttr(inputElement, \"checked\");\n * // => true\n *\n * @example\n * let videoElement = createDomElement('<video src=\"video.mp4\" controls>');\n *\n * getAttr(videoElement, \"src\");\n * // => \"video.mp4\"\n * \n * getAttr(videoElement, \"controls\");\n * // => true\n * \n * getAttr(videoElement, \"muted\");\n * // => false\n */","meta":{"range":[1260,1500],"filename":"getAttr.js","lineno":44,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100000466","name":"getAttr","type":"ArrowFunctionExpression"},"vars":{"value":"getAttr~value"}},"description":"Gets a DOM element attribute using native\n[`Element.getAttribute()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute),\nexcept that the presence of an attribute without\na value will return `true` instead of an empty string,\nand the absence will return `false`. The function also\ndeals with boolean values using old HTML4 syntax,\nlike `<option selected=\"selected\">`.","tags":[{"originalTitle":"category","title":"category","text":"DOM","value":"DOM"}],"params":[{"type":{"names":["HTMLElement"]},"description":"The DOM element.","name":"domEl"},{"type":{"names":["string"]},"description":"The attribute name.","name":"attrName"}],"returns":[{"type":{"names":["string","Boolean"]},"description":"The attribute value."}],"examples":["// HTML5 syntax\nlet inputElement = createDomElement('<input type=\"checkbox\" checked>');\n\ngetAttr(inputElement, \"checked\");\n// => true","// HTML4 syntax\nlet inputElement = createDomElement('<input type=\"checkbox\" checked=\"checked\"/>');\n\ngetAttr(inputElement, \"checked\");\n// => true","let videoElement = createDomElement('<video src=\"video.mp4\" controls>');\n\ngetAttr(videoElement, \"src\");\n// => \"video.mp4\"\n\ngetAttr(videoElement, \"controls\");\n// => true\n\ngetAttr(videoElement, \"muted\");\n// => false"],"name":"getAttr","longname":"getAttr","kind":"function","scope":"global","___id":"T000002R000038","___s":true,"href":"getattr","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `domEl` | HTMLElement | The DOM element. |","| `attrName` | String | The attribute name. |"],"returnsTable":["| Type | Description |","| --- | --- |","| String<br>Boolean | The attribute value. |"],"signature":"getAttr (domEl, attrName)"},{"comment":"/**\n * Returns all parents of a DOM element,\n * from the closest to the most distant.\n * \n * @category DOM\n * @param  {HTMLElement} domEl The DOM element.\n * @return {Array.<HTMLElement>} The DOM element parents.\n *\n * @example\n * let domChild = document.createElement(\"div\"),\n * \tdomParent = document.createElement(\"div\"),\n * \tdomGrandparent = document.createElement(\"div\"),\n * \tbody = document.body,\n * \thtml = document.querySelector(\"html\");\n * \n * domParent.appendChild(domChild);\n * domGrandparent.appendChild(domParent);\n * body.appendChild(domGrandparent);\n * \n * parents(domChild);\n * // => [domParent, domGrandparent, body, html, document]\n */","meta":{"range":[813,1092],"filename":"parents.js","lineno":26,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100001084","name":"parents","type":"ArrowFunctionExpression"},"vars":{"parentNode":"parents~parentNode"}},"description":"Returns all parents of a DOM element,\nfrom the closest to the most distant.","tags":[{"originalTitle":"category","title":"category","text":"DOM","value":"DOM"}],"params":[{"type":{"names":["HTMLElement"]},"description":"The DOM element.","name":"domEl"}],"returns":[{"type":{"names":["Array.<HTMLElement>"]},"description":"The DOM element parents."}],"examples":["let domChild = document.createElement(\"div\"),\n\tdomParent = document.createElement(\"div\"),\n\tdomGrandparent = document.createElement(\"div\"),\n\tbody = document.body,\n\thtml = document.querySelector(\"html\");\n\ndomParent.appendChild(domChild);\ndomGrandparent.appendChild(domParent);\nbody.appendChild(domGrandparent);\n\nparents(domChild);\n// => [domParent, domGrandparent, body, html, document]"],"name":"parents","longname":"parents","kind":"function","scope":"global","___id":"T000002R000101","___s":true,"href":"parents","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `domEl` | HTMLElement | The DOM element. |"],"returnsTable":["| Type | Description |","| --- | --- |","| Array.&lt;HTMLElement&gt; | The DOM element parents. |"],"signature":"parents (domEl)"},{"comment":"/**\n * Removes an attribute from one or more DOM elements using native\n * [`Element.removeAttribute()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute).\n *\n * @category DOM\n * @param {(HTMLElement|HTMLCollection|NodeList|Array.<HTMLElement>|Set.<HTMLElement>)} domEls One or more DOM elements.\n * @param {string} attrName The attribute name.\n *\n * @example\n * let oneElement = createDomElement('<p data-level=\"42\">Level 42</p>');\n * \n * removeAttr(oneElement, \"data-level\");\n *\n * oneElement.getAttribute(\"data-level\");\n * // => null\n *\n * oneElement.dataset.level;\n * // => undefined\n *\n * @example\n * let oneElement = createDomElement('<a class=\"button\" href=\"/news\">News</a>');\n * \n * removeAttr(oneElement, \"class\");\n *\n * oneElement.getAttribute(\"class\");\n * // => null\n *\n * oneElement.className;\n * // => \"\"\n *\n * @example\n * let listHtml = '<ul><li class=\"item\">A</li><li class=\"item\">B</li></ul>';\n * \tlistElement = createDomElement(listElement),\n * \tmanyElements = listElement.querySelectorAll(\"li\");\n *\n * removeAttr(manyElements, \"class\");\n *\n * manyElements[0].className;\n * // => \"\"\n *\n * manyElements[1].className;\n * // => \"\"\n */","meta":{"range":[1305,1428],"filename":"removeAttr.js","lineno":47,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100001140","name":"removeAttr","type":"ArrowFunctionExpression"},"vars":{"":null}},"description":"Removes an attribute from one or more DOM elements using native\n[`Element.removeAttribute()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute).","tags":[{"originalTitle":"category","title":"category","text":"DOM","value":"DOM"}],"params":[{"type":{"names":["HTMLElement","HTMLCollection","NodeList","Array.<HTMLElement>","Set.<HTMLElement>"]},"description":"One or more DOM elements.","name":"domEls"},{"type":{"names":["string"]},"description":"The attribute name.","name":"attrName"}],"examples":["let oneElement = createDomElement('<p data-level=\"42\">Level 42</p>');\n\nremoveAttr(oneElement, \"data-level\");\n\noneElement.getAttribute(\"data-level\");\n// => null\n\noneElement.dataset.level;\n// => undefined","let oneElement = createDomElement('<a class=\"button\" href=\"/news\">News</a>');\n\nremoveAttr(oneElement, \"class\");\n\noneElement.getAttribute(\"class\");\n// => null\n\noneElement.className;\n// => \"\"","let listHtml = '<ul><li class=\"item\">A</li><li class=\"item\">B</li></ul>';\n\tlistElement = createDomElement(listElement),\n\tmanyElements = listElement.querySelectorAll(\"li\");\n\nremoveAttr(manyElements, \"class\");\n\nmanyElements[0].className;\n// => \"\"\n\nmanyElements[1].className;\n// => \"\""],"name":"removeAttr","longname":"removeAttr","kind":"function","scope":"global","___id":"T000002R000104","___s":true,"href":"removeattr","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `domEls` | HTMLElement<br>HTMLCollection<br>NodeList<br>Array.&lt;HTMLElement&gt;<br>Set.&lt;HTMLElement&gt; | One or more DOM elements. |","| `attrName` | String | The attribute name. |"],"signature":"removeAttr (domEls, attrName)"},{"comment":"/**\n * The same as [`removeAttr()`](#removeattr), except it takes an\n * array with attributes to be removed.\n *\n * @category DOM\n * @param {(HTMLElement|HTMLCollection|NodeList|Array.<HTMLElement>|Set.<HTMLElement>)} domEls One or more DOM elements.\n * @param {Array.<string>} attrArr The array with attributes to be removed.\n *\n * @example\n * let oneElement = createDomElement('<p class=\"level\" data-level=\"42\">Level 42</p>');\n * \n * removeAttrs(oneElement, [\"data-level\", \"class\"]);\n *\n * oneElement.getAttribute(\"data-level\");\n * // => null\n *\n * oneElement.dataset.level;\n * // => undefined\n *\n * oneElement.getAttribute(\"class\");\n * // => null\n * \n * oneElement.className;\n * // => \"\"\n *\n * @example\n * let listHtml = '<ul><li class=\"item\" data-level=\"1\">A</li><li class=\"item\" data-level=\"1\">B</li></ul>',\n * \tlistElement = createDomElement(listHtml),\n * \tmanyElements = listElement.querySelectorAll(\"li\");\n * \n * removeAttrs(manyElements, [\"data-level\", \"class\"]);\n *\n * manyElements[0].getAttribute(\"data-level\");\n * // => null\n *\n * manyElements[1].getAttribute(\"data-level\");\n * // => null\n *\n * manyElements[0].className;\n * // => \"\"\n *\n * manyElements[1].className;\n * // => \"\"\n */","meta":{"range":[1240,1338],"filename":"removeAttrs.js","lineno":47,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100001169","name":"removeAttrs","type":"ArrowFunctionExpression"},"vars":{"":null}},"description":"The same as [`removeAttr()`](#removeattr), except it takes an\narray with attributes to be removed.","tags":[{"originalTitle":"category","title":"category","text":"DOM","value":"DOM"}],"params":[{"type":{"names":["HTMLElement","HTMLCollection","NodeList","Array.<HTMLElement>","Set.<HTMLElement>"]},"description":"One or more DOM elements.","name":"domEls"},{"type":{"names":["Array.<string>"]},"description":"The array with attributes to be removed.","name":"attrArr"}],"examples":["let oneElement = createDomElement('<p class=\"level\" data-level=\"42\">Level 42</p>');\n\nremoveAttrs(oneElement, [\"data-level\", \"class\"]);\n\noneElement.getAttribute(\"data-level\");\n// => null\n\noneElement.dataset.level;\n// => undefined\n\noneElement.getAttribute(\"class\");\n// => null\n\noneElement.className;\n// => \"\"","let listHtml = '<ul><li class=\"item\" data-level=\"1\">A</li><li class=\"item\" data-level=\"1\">B</li></ul>',\n\tlistElement = createDomElement(listHtml),\n\tmanyElements = listElement.querySelectorAll(\"li\");\n\nremoveAttrs(manyElements, [\"data-level\", \"class\"]);\n\nmanyElements[0].getAttribute(\"data-level\");\n// => null\n\nmanyElements[1].getAttribute(\"data-level\");\n// => null\n\nmanyElements[0].className;\n// => \"\"\n\nmanyElements[1].className;\n// => \"\""],"name":"removeAttrs","longname":"removeAttrs","kind":"function","scope":"global","___id":"T000002R000106","___s":true,"href":"removeattrs","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `domEls` | HTMLElement<br>HTMLCollection<br>NodeList<br>Array.&lt;HTMLElement&gt;<br>Set.&lt;HTMLElement&gt; | One or more DOM elements. |","| `attrArr` | Array.&lt;String&gt; | The array with attributes to be removed. |"],"signature":"removeAttrs (domEls, attrArr)"},{"comment":"/**\n * The same as [`parents()`](#parents), except it includes\n * the DOM element itself.\n * \n * @category DOM\n * @param  {HTMLElement} domEl The DOM element.\n * @return {Array.<HTMLElement>} The DOM element and its parents.\n * \n * @example\n * let domChild = document.createElement(\"div\"),\n * \tdomParent = document.createElement(\"div\"),\n * \tdomGrandparent = document.createElement(\"div\"),\n * \tbody = document.body,\n * \thtml = document.querySelector(\"html\");\n * \n * domParent.appendChild(domChild);\n * domGrandparent.appendChild(domParent);\n * body.appendChild(domGrandparent);\n * \n * selfAndParents(domChild);\n * // => [domChild, domParent, domGrandparent, body, html, document]\n */","meta":{"range":[876,1043],"filename":"selfAndParents.js","lineno":27,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100001236","name":"selfAndParents","type":"ArrowFunctionExpression"}},"description":"The same as [`parents()`](#parents), except it includes\nthe DOM element itself.","tags":[{"originalTitle":"category","title":"category","text":"DOM","value":"DOM"}],"params":[{"type":{"names":["HTMLElement"]},"description":"The DOM element.","name":"domEl"}],"returns":[{"type":{"names":["Array.<HTMLElement>"]},"description":"The DOM element and its parents."}],"examples":["let domChild = document.createElement(\"div\"),\n\tdomParent = document.createElement(\"div\"),\n\tdomGrandparent = document.createElement(\"div\"),\n\tbody = document.body,\n\thtml = document.querySelector(\"html\");\n\ndomParent.appendChild(domChild);\ndomGrandparent.appendChild(domParent);\nbody.appendChild(domGrandparent);\n\nselfAndParents(domChild);\n// => [domChild, domParent, domGrandparent, body, html, document]"],"name":"selfAndParents","longname":"selfAndParents","kind":"function","scope":"global","___id":"T000002R000110","___s":true,"href":"selfandparents","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `domEl` | HTMLElement | The DOM element. |"],"returnsTable":["| Type | Description |","| --- | --- |","| Array.&lt;HTMLElement&gt; | The DOM element and its parents. |"],"signature":"selfAndParents (domEl)"},{"comment":"/**\n * Sets an attribute for one or more DOM elements using native\n * [`Element.setAttribute()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute).\n *\n * @category DOM\n * @param {(HTMLElement|HTMLCollection|NodeList|Array.<HTMLElement>|Set.<HTMLElement>)} domEls One or more DOM elements.\n * @param {string} attrName The attribute name.\n * @param {(string|number|boolean)} value The attribute value.\n *\n * @example\n * let oneElement = createDomElement('<p>Level 42</p>');\n * \n * setAttr(oneElement, \"data-level\", 42);\n *\n * oneElement.getAttribute(\"data-level\");\n * // => \"42\"\n *\n * oneElement.dataset.level;\n * // => \"42\"\n *\n * @example\n * let oneElement = createDomElement('<a href=\"/news\">News</a>');\n * \n * setAttr(oneElement, \"class\", \"button\");\n *\n * oneElement.getAttribute(\"class\");\n * // => \"button\"\n *\n * oneElement.className;\n * // => \"button\"\n *\n * @example\n * let listElement = createDomElement('<ul><li>A</li><li>B</li><li>C</li></ul>'),\n * \tmanyElements = listElement.querySelectorAll(\"li\");\n * \n * setAttr(manyElements, \"class\", \"item\");\n *\n * manyElements[0].className;\n * // => \"item\"\n *\n * manyElements[1].className;\n * // => \"item\"\n */","meta":{"range":[1310,1437],"filename":"setAttr.js","lineno":47,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100001271","name":"setAttr","type":"ArrowFunctionExpression"},"vars":{"":null}},"description":"Sets an attribute for one or more DOM elements using native\n[`Element.setAttribute()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute).","tags":[{"originalTitle":"category","title":"category","text":"DOM","value":"DOM"}],"params":[{"type":{"names":["HTMLElement","HTMLCollection","NodeList","Array.<HTMLElement>","Set.<HTMLElement>"]},"description":"One or more DOM elements.","name":"domEls"},{"type":{"names":["string"]},"description":"The attribute name.","name":"attrName"},{"type":{"names":["string","number","boolean"]},"description":"The attribute value.","name":"value"}],"examples":["let oneElement = createDomElement('<p>Level 42</p>');\n\nsetAttr(oneElement, \"data-level\", 42);\n\noneElement.getAttribute(\"data-level\");\n// => \"42\"\n\noneElement.dataset.level;\n// => \"42\"","let oneElement = createDomElement('<a href=\"/news\">News</a>');\n\nsetAttr(oneElement, \"class\", \"button\");\n\noneElement.getAttribute(\"class\");\n// => \"button\"\n\noneElement.className;\n// => \"button\"","let listElement = createDomElement('<ul><li>A</li><li>B</li><li>C</li></ul>'),\n\tmanyElements = listElement.querySelectorAll(\"li\");\n\nsetAttr(manyElements, \"class\", \"item\");\n\nmanyElements[0].className;\n// => \"item\"\n\nmanyElements[1].className;\n// => \"item\""],"name":"setAttr","longname":"setAttr","kind":"function","scope":"global","___id":"T000002R000112","___s":true,"href":"setattr","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `domEls` | HTMLElement<br>HTMLCollection<br>NodeList<br>Array.&lt;HTMLElement&gt;<br>Set.&lt;HTMLElement&gt; | One or more DOM elements. |","| `attrName` | String | The attribute name. |","| `value` | String<br>Number<br>Boolean | The attribute value. |"],"signature":"setAttr (domEls, attrName, value)"},{"comment":"/**\n * The same as [`setAttr()`](#setattr), except it takes an object\n * with attribute name and value pairs to set one or\n * many attributes at once.\n *\n * @category DOM\n * @param {(HTMLElement|HTMLCollection|NodeList|Array.<HTMLElement>|Set.<HTMLElement>)} domEls One or more DOM elements.\n * @param {Object} attrObj The object with attribute name and value pairs, e.g. `{ \"data-level\": 42 }`.\n *\n * @example\n * let oneElement = createDomElement('<p>Level 42</p>');\n * \n * setAttrs(oneElement, {\n * \t\"data-level\": 42,\n * \t\"class\": \"level\"\n * });\n *\n * oneElement.getAttribute(\"data-level\");\n * // => \"42\"\n *\n * oneElement.dataset.level;\n * // => \"42\"\n *\n * oneElement.getAttribute(\"class\");\n * // => \"level\"\n *\n * oneElement.className;\n * // => \"level\"\n *\n * @example\n * let listElement = createDomElement('<ul><li>A</li><li>B</li><li>C</li></ul>'),\n * \tmanyElements = listElement.querySelectorAll(\"li\");\n * \n * setAttrs(manyElements, {\n * \t\"data-level\": 42,\n * \t\"class\": \"item\"\n * });\n *\n * manyElements[0].getAttribute(\"data-level\");\n * // => \"42\"\n *\n * manyElements[1].getAttribute(\"data-level\");\n * // => \"42\"\n *\n * manyElements[0].className;\n * // => \"item\"\n *\n * manyElements[1].className;\n * // => \"item\"\n */","meta":{"range":[1258,1379],"filename":"setAttrs.js","lineno":53,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100001301","name":"setAttrs","type":"ArrowFunctionExpression"},"vars":{"":null}},"description":"The same as [`setAttr()`](#setattr), except it takes an object\nwith attribute name and value pairs to set one or\nmany attributes at once.","tags":[{"originalTitle":"category","title":"category","text":"DOM","value":"DOM"}],"params":[{"type":{"names":["HTMLElement","HTMLCollection","NodeList","Array.<HTMLElement>","Set.<HTMLElement>"]},"description":"One or more DOM elements.","name":"domEls"},{"type":{"names":["Object"]},"description":"The object with attribute name and value pairs, e.g. `{ \"data-level\": 42 }`.","name":"attrObj"}],"examples":["let oneElement = createDomElement('<p>Level 42</p>');\n\nsetAttrs(oneElement, {\n\t\"data-level\": 42,\n\t\"class\": \"level\"\n});\n\noneElement.getAttribute(\"data-level\");\n// => \"42\"\n\noneElement.dataset.level;\n// => \"42\"\n\noneElement.getAttribute(\"class\");\n// => \"level\"\n\noneElement.className;\n// => \"level\"","let listElement = createDomElement('<ul><li>A</li><li>B</li><li>C</li></ul>'),\n\tmanyElements = listElement.querySelectorAll(\"li\");\n\nsetAttrs(manyElements, {\n\t\"data-level\": 42,\n\t\"class\": \"item\"\n});\n\nmanyElements[0].getAttribute(\"data-level\");\n// => \"42\"\n\nmanyElements[1].getAttribute(\"data-level\");\n// => \"42\"\n\nmanyElements[0].className;\n// => \"item\"\n\nmanyElements[1].className;\n// => \"item\""],"name":"setAttrs","longname":"setAttrs","kind":"function","scope":"global","___id":"T000002R000114","___s":true,"href":"setattrs","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `domEls` | HTMLElement<br>HTMLCollection<br>NodeList<br>Array.&lt;HTMLElement&gt;<br>Set.&lt;HTMLElement&gt; | One or more DOM elements. |","| `attrObj` | Object | The object with attribute name and value pairs, e.g. `{ \"data-level\": 42 }`. |"],"signature":"setAttrs (domEls, attrObj)"}]},{"name":"Event","href":"event","items":[{"comment":"/**\n * Returns an array with all DOM elements affected by an event.\n * The function serves as a polyfill for\n * [`Event.composedPath()`](https://dom.spec.whatwg.org/#dom-event-composedpath).\n *\n * @category Event\n * @param {Event} evt The triggered event.\n * @return {Array.<HTMLElement>} The DOM elements affected by the event.\n * \n * @example\n * let domChild = document.createElement(\"div\"),\n * \tdomParent = document.createElement(\"div\"),\n * \tdomGrandparent = document.createElement(\"div\"),\n * \tbody = document.body,\n * \thtml = document.querySelector(\"html\");\n * \n * domParent.appendChild(domChild);\n * domGrandparent.appendChild(domParent);\n * body.appendChild(domGrandparent);\n * \n * domChild.addEventListener(\"click\", dealWithClick);\n * const dealWithClick = evt => getEventPath(evt);\n *\n * // when domChild is clicked:\n * // => [domChild, domParent, domGrandparent, body, html, document, window]\n */","meta":{"range":[960,1326],"filename":"getEventPath.js","lineno":29,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100000803","name":"getEventPath","type":"ArrowFunctionExpression"},"vars":{"path":"getEventPath~path","target":"getEventPath~target"}},"description":"Returns an array with all DOM elements affected by an event.\nThe function serves as a polyfill for\n[`Event.composedPath()`](https://dom.spec.whatwg.org/#dom-event-composedpath).","tags":[{"originalTitle":"category","title":"category","text":"Event","value":"Event"}],"params":[{"type":{"names":["Event"]},"description":"The triggered event.","name":"evt"}],"returns":[{"type":{"names":["Array.<HTMLElement>"]},"description":"The DOM elements affected by the event."}],"examples":["let domChild = document.createElement(\"div\"),\n\tdomParent = document.createElement(\"div\"),\n\tdomGrandparent = document.createElement(\"div\"),\n\tbody = document.body,\n\thtml = document.querySelector(\"html\");\n\ndomParent.appendChild(domChild);\ndomGrandparent.appendChild(domParent);\nbody.appendChild(domGrandparent);\n\ndomChild.addEventListener(\"click\", dealWithClick);\nconst dealWithClick = evt => getEventPath(evt);\n\n// when domChild is clicked:\n// => [domChild, domParent, domGrandparent, body, html, document, window]"],"name":"getEventPath","longname":"getEventPath","kind":"function","scope":"global","___id":"T000002R000083","___s":true,"href":"geteventpath","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `evt` | Event | The triggered event. |"],"returnsTable":["| Type | Description |","| --- | --- |","| Array.&lt;HTMLElement&gt; | The DOM elements affected by the event. |"],"signature":"getEventPath (evt)"},{"comment":"/**\n * Removes one or more event listeners from one or more DOM elements at once.\n * The function is a wrapper for\n * [`Element.removeEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)\n * that accepts a space-separated event names string and a group\n * of target DOM elements.\n *\n * @category Event\n * @param {(Window|HTMLDocument|HTMLElement|HTMLCollection|NodeList|Array.<HTMLElement>|Set.<HTMLElement>)} domEls One or more DOM elements, including `document` and `window`.\n * @param {string} eventStr The event names string.\n * @param {Function} callback The function to be ignored.\n * @param {Boolean} [useCapture = false] The event phase being listened for.\n *\n * @example\n *\n * let oneElement = document.querySelector(\"a\");\n * let manyElements = document.querySelectorAll(\"a\");\n * \n * ignore(oneElement, \"click\", reactToClick, true);\n * ignore(manyElements, \"click\", reactToClick);\n * ignore(window, \"load resize\", reactToLoadAndResize);\n */","meta":{"range":[1063,1200],"filename":"ignore.js","lineno":25,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100000920","name":"ignore","type":"ArrowFunctionExpression"}},"description":"Removes one or more event listeners from one or more DOM elements at once.\nThe function is a wrapper for\n[`Element.removeEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)\nthat accepts a space-separated event names string and a group\nof target DOM elements.","tags":[{"originalTitle":"category","title":"category","text":"Event","value":"Event"}],"params":[{"type":{"names":["Window","HTMLDocument","HTMLElement","HTMLCollection","NodeList","Array.<HTMLElement>","Set.<HTMLElement>"]},"description":"One or more DOM elements, including `document` and `window`.","name":"domEls"},{"type":{"names":["string"]},"description":"The event names string.","name":"eventStr"},{"type":{"names":["function"]},"description":"The function to be ignored.","name":"callback"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"The event phase being listened for.","name":"useCapture"}],"examples":["let oneElement = document.querySelector(\"a\");\nlet manyElements = document.querySelectorAll(\"a\");\n\nignore(oneElement, \"click\", reactToClick, true);\nignore(manyElements, \"click\", reactToClick);\nignore(window, \"load resize\", reactToLoadAndResize);"],"name":"ignore","longname":"ignore","kind":"function","scope":"global","___id":"T000002R000090","___s":true,"href":"ignore","paramsTable":["| Name | Default | Type | Description |","| --- | --- | --- | --- |","| `domEls` |  | Window<br>HTMLDocument<br>HTMLElement<br>HTMLCollection<br>NodeList<br>Array.&lt;HTMLElement&gt;<br>Set.&lt;HTMLElement&gt; | One or more DOM elements, including `document` and `window`. |","| `eventStr` |  | String | The event names string. |","| `callback` |  | Function | The function to be ignored. |","| `useCapture` | `false` | Boolean | The event phase being listened for. **optional** |"],"signature":"ignore (domEls, eventStr, callback, [useCapture])"},{"comment":"/**\n * Adds one or more event listeners to one or more DOM elements at once.\n * The function is a wrapper for\n * [`Element.addEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\n * that accepts a space-separated event names string and a group\n * of target DOM elements.\n *\n * @category Event\n * @param {(Window|HTMLDocument|HTMLElement|HTMLCollection|NodeList|Array.<HTMLElement>|Set.<HTMLElement>)} domEls One or more DOM elements, including `document` and `window`.\n * @param {string} eventStr The event names string.\n * @param {Function} callback The function to be exectuted when the event is dispatched.\n * @param {Boolean} [useCapture = false] The event phase to be listened for.\n *\n * @example\n *\n * let oneElement = document.querySelector(\"a\");\n * let manyElements = document.querySelectorAll(\"a\");\n * \n * listen(oneElement, \"click\", reactToClick, true);\n * listen(manyElements, \"click\", reactToClick);\n * listen(window, \"load resize\", reactToLoadAndResize);\n */","meta":{"range":[1083,1217],"filename":"listen.js","lineno":25,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100000945","name":"listen","type":"ArrowFunctionExpression"}},"description":"Adds one or more event listeners to one or more DOM elements at once.\nThe function is a wrapper for\n[`Element.addEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\nthat accepts a space-separated event names string and a group\nof target DOM elements.","tags":[{"originalTitle":"category","title":"category","text":"Event","value":"Event"}],"params":[{"type":{"names":["Window","HTMLDocument","HTMLElement","HTMLCollection","NodeList","Array.<HTMLElement>","Set.<HTMLElement>"]},"description":"One or more DOM elements, including `document` and `window`.","name":"domEls"},{"type":{"names":["string"]},"description":"The event names string.","name":"eventStr"},{"type":{"names":["function"]},"description":"The function to be exectuted when the event is dispatched.","name":"callback"},{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"description":"The event phase to be listened for.","name":"useCapture"}],"examples":["let oneElement = document.querySelector(\"a\");\nlet manyElements = document.querySelectorAll(\"a\");\n\nlisten(oneElement, \"click\", reactToClick, true);\nlisten(manyElements, \"click\", reactToClick);\nlisten(window, \"load resize\", reactToLoadAndResize);"],"name":"listen","longname":"listen","kind":"function","scope":"global","___id":"T000002R000092","___s":true,"href":"listen","paramsTable":["| Name | Default | Type | Description |","| --- | --- | --- | --- |","| `domEls` |  | Window<br>HTMLDocument<br>HTMLElement<br>HTMLCollection<br>NodeList<br>Array.&lt;HTMLElement&gt;<br>Set.&lt;HTMLElement&gt; | One or more DOM elements, including `document` and `window`. |","| `eventStr` |  | String | The event names string. |","| `callback` |  | Function | The function to be exectuted when the event is dispatched. |","| `useCapture` | `false` | Boolean | The event phase to be listened for. **optional** |"],"signature":"listen (domEls, eventStr, callback, [useCapture])"},{"comment":"/**\n * Triggers a custom DOM event.\n *\n * @category Event\n * @param  {(Window|HTMLDocument|HTMLElement)} domEl The DOM element, including `document` and `window`.\n * @param  {string} evtName The event name.\n * @param  {boolean} [bubbles = false] Whether the event bubbles.\n * @param  {boolean} [cancelable = false] Whether the event can be canceled.\n * @param  {*} [detail] Any information passed along.\n *\n * @example\n * let popupButton = document.querySelector(\".popup__button\"),\n * \tpopupLayer = document.querySelector(\".popup__layer\");\n * \n * popupButton.addEventListener(\"click\", evt => {\n * \ttrigger(popupLayer, \"open\");\n * });\n */","meta":{"range":[852,1432],"filename":"trigger.js","lineno":23,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100001675","name":"trigger","type":"ArrowFunctionExpression"},"vars":{"evt":"trigger~evt"}},"description":"Triggers a custom DOM event.","tags":[{"originalTitle":"category","title":"category","text":"Event","value":"Event"}],"params":[{"type":{"names":["Window","HTMLDocument","HTMLElement"]},"description":"The DOM element, including `document` and `window`.","name":"domEl"},{"type":{"names":["string"]},"description":"The event name.","name":"evtName"},{"type":{"names":["boolean"]},"optional":true,"defaultvalue":false,"description":"Whether the event bubbles.","name":"bubbles"},{"type":{"names":["boolean"]},"optional":true,"defaultvalue":false,"description":"Whether the event can be canceled.","name":"cancelable"},{"type":{"names":["*"]},"optional":true,"description":"Any information passed along.","name":"detail"}],"examples":["let popupButton = document.querySelector(\".popup__button\"),\n\tpopupLayer = document.querySelector(\".popup__layer\");\n\npopupButton.addEventListener(\"click\", evt => {\n\ttrigger(popupLayer, \"open\");\n});"],"name":"trigger","longname":"trigger","kind":"function","scope":"global","___id":"T000002R000137","___s":true,"href":"trigger","paramsTable":["| Name | Default | Type | Description |","| --- | --- | --- | --- |","| `domEl` |  | Window<br>HTMLDocument<br>HTMLElement | The DOM element, including `document` and `window`. |","| `evtName` |  | String | The event name. |","| `bubbles` | `false` | Boolean | Whether the event bubbles. **optional** |","| `cancelable` | `false` | Boolean | Whether the event can be canceled. **optional** |","| `detail` |  | All | Any information passed along. **optional** |"],"signature":"trigger (domEl, evtName, [bubbles], [cancelable], [detail])"}]},{"name":"Geometry","href":"geometry","items":[{"comment":"/**\n * Given a DOM element, returns an object with position\n * and clipping information relative to a mask, defined\n * by the second parameter, or to the viewport, if the\n * second parameter is omitted.\n *\n * The mask can be either a DOM element or an object\n * containing numeric values for \"top\", \"bottom\",\n * \"left\" and \"right\" properties, like a\n * [`DOMRect`](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect).\n *\n * @category Geometry\n *\n * @param  {HTMLElement} domEl The DOM element.\n * @param  {(HTMLElement|Object)} [maskDef] The mask definition.\n * @return {ClippingObject} Position and clipping information relative to a mask (see table below).\n *\n * @example\n * let domEl = document.createElement(\"div\");\n *\n * domEl.style.position = \"fixed\";\n * domEl.style.top = \"-50px\";\n * domEl.style.left = \"-50px\";\n * domEl.style.width = \"200px\";\n * domEl.style.height = \"200px\";\n *\n * document.body.appendChild(domEl);\n *\n * let info = getClippingInfo(domEl);\n *\n * info.isClippedTop;\n * // => true\n *\n * info.isClippedLeft;\n * // => true\n *\n * info.isFullyVisible;\n * // => false\n *\n * info.isPartiallyVisible;\n * // => true\n *\n * info.isInvisible;\n * // => false\n */","meta":{"range":[2669,4270],"filename":"getClippingInfo.js","lineno":70,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100000530","name":"getClippingInfo","type":"ArrowFunctionExpression"},"vars":{"domCoords":"getClippingInfo~domCoords","maskCoords":"getClippingInfo~maskCoords","vertAxis":"getClippingInfo~vertAxis","horzAxis":"getClippingInfo~horzAxis","isOffTop":"getClippingInfo~isOffTop","isOffBottom":"getClippingInfo~isOffBottom","isOffLeft":"getClippingInfo~isOffLeft","isOffRight":"getClippingInfo~isOffRight","isOff":"getClippingInfo~isOff","isClippedTop":"getClippingInfo~isClippedTop","isClippedBottom":"getClippingInfo~isClippedBottom","isClippedLeft":"getClippingInfo~isClippedLeft","isClippedRight":"getClippingInfo~isClippedRight","isClipped":"getClippingInfo~isClipped","isFullyVisible":"getClippingInfo~isFullyVisible","isInvisible":"getClippingInfo~isInvisible","isAsVisibleAsPossible":"getClippingInfo~isAsVisibleAsPossible","isNotAsVisibleAsPossible":"getClippingInfo~isNotAsVisibleAsPossible","isPartiallyVisible":"getClippingInfo~isPartiallyVisible"}},"description":"Given a DOM element, returns an object with position\nand clipping information relative to a mask, defined\nby the second parameter, or to the viewport, if the\nsecond parameter is omitted.\n\nThe mask can be either a DOM element or an object\ncontaining numeric values for \"top\", \"bottom\",\n\"left\" and \"right\" properties, like a\n[`DOMRect`](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect).","tags":[{"originalTitle":"category","title":"category","text":"Geometry","value":"Geometry"}],"params":[{"type":{"names":["HTMLElement"]},"description":"The DOM element.","name":"domEl"},{"type":{"names":["HTMLElement","Object"]},"optional":true,"description":"The mask definition.","name":"maskDef"}],"returns":[{"type":{"names":["ClippingObject"]},"description":"Position and clipping information relative to a mask (see table below)."}],"examples":["let domEl = document.createElement(\"div\");\n\ndomEl.style.position = \"fixed\";\ndomEl.style.top = \"-50px\";\ndomEl.style.left = \"-50px\";\ndomEl.style.width = \"200px\";\ndomEl.style.height = \"200px\";\n\ndocument.body.appendChild(domEl);\n\nlet info = getClippingInfo(domEl);\n\ninfo.isClippedTop;\n// => true\n\ninfo.isClippedLeft;\n// => true\n\ninfo.isFullyVisible;\n// => false\n\ninfo.isPartiallyVisible;\n// => true\n\ninfo.isInvisible;\n// => false"],"name":"getClippingInfo","longname":"getClippingInfo","kind":"function","scope":"global","___id":"T000002R000044","___s":true,"href":"getclippinginfo","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `domEl` | HTMLElement | The DOM element. |","| `maskDef` | HTMLElement<br>Object | The mask definition. **optional** |"],"returnsTable":["| Type | Description |","| --- | --- |","| ClippingObject | Position and clipping information relative to a mask (see table below). |"],"signature":"getClippingInfo (domEl, [maskDef])","typedefReturns":["ClippingObject"]},{"comment":"/**\n * Calculates and returns the distance between two points,\n * given their cartesian coordinates, represented, each one,\n * by an array of numbers.\n *\n * For example, the point in a plane A(x, y) should be passed\n * to the function as `[x, y]`. Likewise, the point in\n * 3D space A(x, y, z) should be passed as `[x, y, z]`.\n *\n * The function deals with cartesian coordinates in\n * [n-dimensional spaces](https://en.wikipedia.org/wiki/Euclidean_distance#n_dimensions).\n *\n * @category Geometry\n * @param {Array.<number>} coordA An array representing a cartesian coordinate.\n * @param {Array.<number>} coordB An array representing a cartesian coordinate.\n * @return {number} The distance between the two cartesian coordinates.\n *\n * @example\n * getDistanceBetweenCoords([0, 0], [3, 4]);\n * // => 5\n *\n * getDistanceBetweenCoords([2, 1], [5, 5]);\n * // => 5\n *\n * getDistanceBetweenCoords([2, 1, 8], [5, 5, 0]);\n * // => 9.433981132056603\n *\n * getDistanceBetweenCoords([2], [5]);\n * // => 3\n */","meta":{"range":[1098,1551],"filename":"getDistanceBetweenCoords.js","lineno":34,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100000724","name":"getDistanceBetweenCoords","type":"ArrowFunctionExpression"},"vars":{"areParamsValid":"getDistanceBetweenCoords~areParamsValid","":null}},"description":"Calculates and returns the distance between two points,\ngiven their cartesian coordinates, represented, each one,\nby an array of numbers.\n\nFor example, the point in a plane A(x, y) should be passed\nto the function as `[x, y]`. Likewise, the point in\n3D space A(x, y, z) should be passed as `[x, y, z]`.\n\nThe function deals with cartesian coordinates in\n[n-dimensional spaces](https://en.wikipedia.org/wiki/Euclidean_distance#n_dimensions).","tags":[{"originalTitle":"category","title":"category","text":"Geometry","value":"Geometry"}],"params":[{"type":{"names":["Array.<number>"]},"description":"An array representing a cartesian coordinate.","name":"coordA"},{"type":{"names":["Array.<number>"]},"description":"An array representing a cartesian coordinate.","name":"coordB"}],"returns":[{"type":{"names":["number"]},"description":"The distance between the two cartesian coordinates."}],"examples":["getDistanceBetweenCoords([0, 0], [3, 4]);\n// => 5\n\ngetDistanceBetweenCoords([2, 1], [5, 5]);\n// => 5\n\ngetDistanceBetweenCoords([2, 1, 8], [5, 5, 0]);\n// => 9.433981132056603\n\ngetDistanceBetweenCoords([2], [5]);\n// => 3"],"name":"getDistanceBetweenCoords","longname":"getDistanceBetweenCoords","kind":"function","scope":"global","___id":"T000002R000080","___s":true,"href":"getdistancebetweencoords","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `coordA` | Array.&lt;Number&gt; | An array representing a cartesian coordinate. |","| `coordB` | Array.&lt;Number&gt; | An array representing a cartesian coordinate. |"],"returnsTable":["| Type | Description |","| --- | --- |","| Number | The distance between the two cartesian coordinates. |"],"signature":"getDistanceBetweenCoords (coordA, coordB)"}]},{"name":"Promise","href":"promise","items":[{"comment":"/**\n * Transforms a DOM event into a promise.\n * \n * The functions takes as parameters: a DOM element,\n * the name of the event to be listened for\n * and a function that verifies if the event has already\n * happened, which receives the DOM element as parameter.\n *\n * Like all promises in Javascript, the function will\n * only fulfill once, either if the verification function\n * returns true or when the event occurs for the first time.\n *\n * Note that the function throws an error if the first two\n * parameters are not a DOM element and a string.\n *\n * @category Promise\n *\n * @param  {(Window|HTMLDocument|HTMLElement)} domEl The DOM element, including `document` and `window`.\n * @param  {string} evtName The event to be listened for.\n * @param  {function} [happened = domEl => false] The verification function.\n * @return {Promise} When fulfilled, returns the DOM element.\n *\n * @example\n * let checkbox = document.createElement(\"input\");\n * checkbox.type = \"checkbox\";\n * document.body.appendChild(checkbox);\n *\n * eventAsPromise(checkbox, \"change\")\n * \t.then(doSomethingAfterChange);\n *\n * @example\n * let imageEl = document.createElement(\"img\");\n * imageEl.src = \"img.jpg\";\n * document.body.appendChild(imageEl);\n *\n * eventAsPromise(imageEl, \"load\", imageEl => imageEl.complete)\n * \t.then(doSomethingAfterImageLoaded);\n */","meta":{"range":[1547,2096],"filename":"eventAsPromise.js","lineno":43,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100000268","name":"eventAsPromise","type":"ArrowFunctionExpression"},"vars":{"":null}},"description":"Transforms a DOM event into a promise.\n\nThe functions takes as parameters: a DOM element,\nthe name of the event to be listened for\nand a function that verifies if the event has already\nhappened, which receives the DOM element as parameter.\n\nLike all promises in Javascript, the function will\nonly fulfill once, either if the verification function\nreturns true or when the event occurs for the first time.\n\nNote that the function throws an error if the first two\nparameters are not a DOM element and a string.","tags":[{"originalTitle":"category","title":"category","text":"Promise","value":"Promise"}],"params":[{"type":{"names":["Window","HTMLDocument","HTMLElement"]},"description":"The DOM element, including `document` and `window`.","name":"domEl"},{"type":{"names":["string"]},"description":"The event to be listened for.","name":"evtName"},{"type":{"names":["function"]},"optional":true,"defaultvalue":"domEl => false","description":"The verification function.","name":"happened"}],"returns":[{"type":{"names":["Promise"]},"description":"When fulfilled, returns the DOM element."}],"examples":["let checkbox = document.createElement(\"input\");\ncheckbox.type = \"checkbox\";\ndocument.body.appendChild(checkbox);\n\neventAsPromise(checkbox, \"change\")\n\t.then(doSomethingAfterChange);","let imageEl = document.createElement(\"img\");\nimageEl.src = \"img.jpg\";\ndocument.body.appendChild(imageEl);\n\neventAsPromise(imageEl, \"load\", imageEl => imageEl.complete)\n\t.then(doSomethingAfterImageLoaded);"],"name":"eventAsPromise","longname":"eventAsPromise","kind":"function","scope":"global","___id":"T000002R000023","___s":true,"href":"eventaspromise","paramsTable":["| Name | Default | Type | Description |","| --- | --- | --- | --- |","| `domEl` |  | Window<br>HTMLDocument<br>HTMLElement | The DOM element, including `document` and `window`. |","| `evtName` |  | String | The event to be listened for. |","| `happened` | `domEl => false` | Function | The verification function. **optional** |"],"returnsTable":["| Type | Description |","| --- | --- |","| Promise | When fulfilled, returns the DOM element. |"],"signature":"eventAsPromise (domEl, evtName, [happened])"},{"comment":"/**\n * Delays the chaining of a promise by a specified\n * time in milliseconds.\n *\n * The function is curried so as to be used inside\n * the `.then()` method, passing along the resolved\n * value from the previous promise step to the next.\n *\n * Note that if a non-numeric parameter is passed,\n * the promise resolves without delay, skipping the\n * internal `setTimeout()`.\n * \n * @category Promise\n *\n * @param  {number} delay The delay in milliseconds.\n * @return {Promise} When fulfilled, returns the resolved value from the previous step.\n * @public\n *\n * @example\n * Promise.resolve(\"waiting\")\n * \t.then(waitInPromise(1000))\n * \t.then(doSomethingAfterOneSecond);\n */","meta":{"range":[677,836],"filename":"waitInPromise.js","lineno":24,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100001758","name":"waitInPromise","type":"ArrowFunctionExpression"},"vars":{"":null}},"description":"Delays the chaining of a promise by a specified\ntime in milliseconds.\n\nThe function is curried so as to be used inside\nthe `.then()` method, passing along the resolved\nvalue from the previous promise step to the next.\n\nNote that if a non-numeric parameter is passed,\nthe promise resolves without delay, skipping the\ninternal `setTimeout()`.","tags":[{"originalTitle":"category","title":"category","text":"Promise","value":"Promise"}],"params":[{"type":{"names":["number"]},"description":"The delay in milliseconds.","name":"delay"}],"returns":[{"type":{"names":["Promise"]},"description":"When fulfilled, returns the resolved value from the previous step."}],"access":"public","examples":["Promise.resolve(\"waiting\")\n\t.then(waitInPromise(1000))\n\t.then(doSomethingAfterOneSecond);"],"name":"waitInPromise","longname":"waitInPromise","kind":"function","scope":"global","___id":"T000002R000145","___s":true,"href":"waitinpromise","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `delay` | Number | The delay in milliseconds. |"],"returnsTable":["| Type | Description |","| --- | --- |","| Promise | When fulfilled, returns the resolved value from the previous step. |"],"signature":"waitInPromise (delay)"}]},{"name":"Random","href":"random","items":[{"comment":"/**\n * Returns `true` approximately one out of `num` times,\n * randomly.\n *\n * @category Random\n * \n * @param  {number} num A number greater than zero.\n * @return {boolean} Returns `true` approximately one out of `num` times.\n *\n * @example\n * oneOutOf(2);\n * // => true\n *\n * oneOutOf(2);\n * // => false\n */","meta":{"range":[431,611],"filename":"oneOutOf.js","lineno":20,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100001040","name":"oneOutOf","type":"ArrowFunctionExpression"}},"description":"Returns `true` approximately one out of `num` times,\nrandomly.","tags":[{"originalTitle":"category","title":"category","text":"Random","value":"Random"}],"params":[{"type":{"names":["number"]},"description":"A number greater than zero.","name":"num"}],"returns":[{"type":{"names":["boolean"]},"description":"Returns `true` approximately one out of `num` times."}],"examples":["oneOutOf(2);\n// => true\n\noneOutOf(2);\n// => false"],"name":"oneOutOf","longname":"oneOutOf","kind":"function","scope":"global","___id":"T000002R000099","___s":true,"href":"oneoutof","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `num` | Number | A number greater than zero. |"],"returnsTable":["| Type | Description |","| --- | --- |","| Boolean | Returns `true` approximately one out of `num` times. |"],"signature":"oneOutOf (num)"}]},{"name":"Reduce","href":"reduce","items":[{"comment":"/**\n * When used with `[].reduce()`, returns\n * the average of the values in an array.\n *\n * Note that reducing arrays with non-numeric values\n * using `toAverage()` can lead to unexpected results.\n * Also, note that the parentheses can be ommited.\n *\n * @category Reduce\n *\n * @return {number} The average of the values in an array.\n * @public\n *\n * @example\n * [3, 5, 7, 9].reduce(toAverage());\n * // => 6\n *\n * [3, 5, 7, 9].reduce(toAverage);\n * // => 6\n */","meta":{"range":[467,738],"filename":"toAverage.js","lineno":21,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100001353","name":"toAverage","type":"ArrowFunctionExpression"},"vars":{"func":"toAverage~func","":null}},"description":"When used with `[].reduce()`, returns\nthe average of the values in an array.\n\nNote that reducing arrays with non-numeric values\nusing `toAverage()` can lead to unexpected results.\nAlso, note that the parentheses can be ommited.","tags":[{"originalTitle":"category","title":"category","text":"Reduce","value":"Reduce"}],"returns":[{"type":{"names":["number"]},"description":"The average of the values in an array."}],"access":"public","examples":["[3, 5, 7, 9].reduce(toAverage());\n// => 6\n\n[3, 5, 7, 9].reduce(toAverage);\n// => 6"],"name":"toAverage","longname":"toAverage","kind":"function","scope":"global","params":[],"___id":"T000002R000118","___s":true,"href":"toaverage","paramsTable":["|  |","|  |"],"returnsTable":["| Type | Description |","| --- | --- |","| Number | The average of the values in an array. |"],"signature":"toAverage ()"},{"comment":"/**\n * When used with `[].reduce()`, returns\n * the object in an array in which a specific property,\n * passed as parameter, has the closest value to the average.\n *\n * If two or more results are found, the first one\n * is returned.\n *\n * Note that the function expects the reduced array to be\n * formed by objects with the same set of properties.\n *\n * @category Reduce\n *\n * @param {string} path The path to the property of an object.\n * @return {Object} The object in which an specific property has the closest value to the average.\n * @public\n *\n * @example\n * let cities = [{\n * \t\"city\": \"Rio de Janeiro\",\n * \t\"temperature\": 96,\n * \t\"demographics\": {\n * \t\t\"population\": 6.32\n * \t}\n * }, {\n * \t\"city\": \"São Paulo\",\n * \t\"temperature\": 82.5,\n * \t\"demographics\": {\n * \t\t\"population\": 12.04\n * \t}\n * }, {\n * \t\"city\": \"Curitiba\",\n * \t\"temperature\": 70,\n * \t\"demographics\": {\n * \t\t\"population\": 1.752\n * \t}\n * }, {\n * \t\"city\": \"Florianópolis\",\n * \t\"temperature\": 86,\n * \t\"demographics\": {\n * \t\t\"population\": 0.249\n * \t}\n * }];\n *\n * // average \"temperature\": 83.625\n * // average \"population\": 5.09025\n *\n * cities.reduce(toAverageProp(\"temperature\"));\n * // => { \"city\": \"São Paulo\", [...] }\n *\n * cities.reduce(toAverageProp(\"demographics.population\"));\n * // => { \"city\": \"Rio de Janeiro\", [...] }\n */","meta":{"range":[1401,1730],"filename":"toAverageProp.js","lineno":57,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100001417","name":"toAverageProp","type":"ArrowFunctionExpression"},"vars":{"average":"toAverageProp~average","":null}},"description":"When used with `[].reduce()`, returns\nthe object in an array in which a specific property,\npassed as parameter, has the closest value to the average.\n\nIf two or more results are found, the first one\nis returned.\n\nNote that the function expects the reduced array to be\nformed by objects with the same set of properties.","tags":[{"originalTitle":"category","title":"category","text":"Reduce","value":"Reduce"}],"params":[{"type":{"names":["string"]},"description":"The path to the property of an object.","name":"path"}],"returns":[{"type":{"names":["Object"]},"description":"The object in which an specific property has the closest value to the average."}],"access":"public","examples":["let cities = [{\n\t\"city\": \"Rio de Janeiro\",\n\t\"temperature\": 96,\n\t\"demographics\": {\n\t\t\"population\": 6.32\n\t}\n}, {\n\t\"city\": \"São Paulo\",\n\t\"temperature\": 82.5,\n\t\"demographics\": {\n\t\t\"population\": 12.04\n\t}\n}, {\n\t\"city\": \"Curitiba\",\n\t\"temperature\": 70,\n\t\"demographics\": {\n\t\t\"population\": 1.752\n\t}\n}, {\n\t\"city\": \"Florianópolis\",\n\t\"temperature\": 86,\n\t\"demographics\": {\n\t\t\"population\": 0.249\n\t}\n}];\n\n// average \"temperature\": 83.625\n// average \"population\": 5.09025\n\ncities.reduce(toAverageProp(\"temperature\"));\n// => { \"city\": \"São Paulo\", [...] }\n\ncities.reduce(toAverageProp(\"demographics.population\"));\n// => { \"city\": \"Rio de Janeiro\", [...] }"],"name":"toAverageProp","longname":"toAverageProp","kind":"function","scope":"global","___id":"T000002R000122","___s":true,"href":"toaverageprop","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `path` | String | The path to the property of an object. |"],"returnsTable":["| Type | Description |","| --- | --- |","| Object | The object in which an specific property has the closest value to the average. |"],"signature":"toAverageProp (path)"},{"comment":"/**\n * When used with `[].reduce()`, returns\n * the closest value to the one passed as parameter.\n *\n * If two or more results are found, the first one\n * is returned.\n *\n * Note that reducing arrays with non-numeric values\n * using `toClosest()` can lead to unexpected results.\n *\n * @category Reduce\n *\n * @param {number} num The base value.\n * @return {number} The value, from an array, closest to the base value.\n * @public\n *\n * @example\n * [3, 5, 7, 9].reduce(toClosest(6));\n * // => 5\n *\n * [3, 5, 7, 9].reduce(toClosest(-2));\n * // => 3\n */","meta":{"range":[555,708],"filename":"toClosest.js","lineno":24,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100001485","name":"toClosest","type":"ArrowFunctionExpression"},"vars":{"":null}},"description":"When used with `[].reduce()`, returns\nthe closest value to the one passed as parameter.\n\nIf two or more results are found, the first one\nis returned.\n\nNote that reducing arrays with non-numeric values\nusing `toClosest()` can lead to unexpected results.","tags":[{"originalTitle":"category","title":"category","text":"Reduce","value":"Reduce"}],"params":[{"type":{"names":["number"]},"description":"The base value.","name":"num"}],"returns":[{"type":{"names":["number"]},"description":"The value, from an array, closest to the base value."}],"access":"public","examples":["[3, 5, 7, 9].reduce(toClosest(6));\n// => 5\n\n[3, 5, 7, 9].reduce(toClosest(-2));\n// => 3"],"name":"toClosest","longname":"toClosest","kind":"function","scope":"global","___id":"T000002R000126","___s":true,"href":"toclosest","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `num` | Number | The base value. |"],"returnsTable":["| Type | Description |","| --- | --- |","| Number | The value, from an array, closest to the base value. |"],"signature":"toClosest (num)"},{"comment":"/**\n * When used with `[].reduce()`, returns\n * the object in an array in which a specific property,\n * passed as parameter, has the closest value to another,\n * also passed as parameter.\n *\n * If two or more results are found, the first one\n * is returned.\n *\n * Note that the function expects the reduced array to be\n * formed by objects with the same set of properties.\n *\n * @category Reduce\n *\n * @param {string} path The path to the property of an object.\n * @param {string} num The base value.\n * @return {Object} The object in which an specific property has the closest value to the base value.\n * @public\n *\n * @example\n * let cities = [{\n * \t\"city\": \"Rio de Janeiro\",\n * \t\"temperature\": 96,\n * \t\"demographics\": {\n * \t\t\"population\": 6.32\n * \t}\n * }, {\n * \t\"city\": \"São Paulo\",\n * \t\"temperature\": 82.5,\n * \t\"demographics\": {\n * \t\t\"population\": 12.04\n * \t}\n * }, {\n * \t\"city\": \"Curitiba\",\n * \t\"temperature\": 70,\n * \t\"demographics\": {\n * \t\t\"population\": 1.752\n * \t}\n * }, {\n * \t\"city\": \"Florianópolis\",\n * \t\"temperature\": 86,\n * \t\"demographics\": {\n * \t\t\"population\": 0.249\n * \t}\n * }];\n *\n * cities.reduce(toClosestProp(\"temperature\", 75));\n * // => { \"city\": \"Curitiba\", [...] }\n *\n * cities.reduce(toClosestProp(\"demographics.population\", 5));\n * // => { \"city\": \"Rio de Janeiro\", [...] }\n */","meta":{"range":[1362,1562],"filename":"toClosestProp.js","lineno":55,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100001524","name":"toClosestProp","type":"ArrowFunctionExpression"},"vars":{"":null}},"description":"When used with `[].reduce()`, returns\nthe object in an array in which a specific property,\npassed as parameter, has the closest value to another,\nalso passed as parameter.\n\nIf two or more results are found, the first one\nis returned.\n\nNote that the function expects the reduced array to be\nformed by objects with the same set of properties.","tags":[{"originalTitle":"category","title":"category","text":"Reduce","value":"Reduce"}],"params":[{"type":{"names":["string"]},"description":"The path to the property of an object.","name":"path"},{"type":{"names":["string"]},"description":"The base value.","name":"num"}],"returns":[{"type":{"names":["Object"]},"description":"The object in which an specific property has the closest value to the base value."}],"access":"public","examples":["let cities = [{\n\t\"city\": \"Rio de Janeiro\",\n\t\"temperature\": 96,\n\t\"demographics\": {\n\t\t\"population\": 6.32\n\t}\n}, {\n\t\"city\": \"São Paulo\",\n\t\"temperature\": 82.5,\n\t\"demographics\": {\n\t\t\"population\": 12.04\n\t}\n}, {\n\t\"city\": \"Curitiba\",\n\t\"temperature\": 70,\n\t\"demographics\": {\n\t\t\"population\": 1.752\n\t}\n}, {\n\t\"city\": \"Florianópolis\",\n\t\"temperature\": 86,\n\t\"demographics\": {\n\t\t\"population\": 0.249\n\t}\n}];\n\ncities.reduce(toClosestProp(\"temperature\", 75));\n// => { \"city\": \"Curitiba\", [...] }\n\ncities.reduce(toClosestProp(\"demographics.population\", 5));\n// => { \"city\": \"Rio de Janeiro\", [...] }"],"name":"toClosestProp","longname":"toClosestProp","kind":"function","scope":"global","___id":"T000002R000128","___s":true,"href":"toclosestprop","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `path` | String | The path to the property of an object. |","| `num` | String | The base value. |"],"returnsTable":["| Type | Description |","| --- | --- |","| Object | The object in which an specific property has the closest value to the base value. |"],"signature":"toClosestProp (path, num)"},{"comment":"/**\n * When used with `[].reduce()`, returns\n * the object in an array in which a specific property\n * has the largest value.\n *\n * If two or more results are found, the first one\n * is returned.\n *\n * Note that the function expects the reduced array to be\n * formed by objects with the same set of properties.\n *\n * @category Reduce\n *\n * @param {string} path The path to the property of an object.\n * @return {Object} The object in which a specific property has the largest value.\n * @public\n *\n * @example\n * let cities = [{\n * \t\"city\": \"Rio de Janeiro\",\n * \t\"temperature\": 96,\n * \t\"demographics\": {\n * \t\t\"population\": 6.32\n * \t}\n * }, {\n * \t\"city\": \"São Paulo\",\n * \t\"temperature\": 82.5,\n * \t\"demographics\": {\n * \t\t\"population\": 12.04\n * \t}\n * }, {\n * \t\"city\": \"Curitiba\",\n * \t\"temperature\": 70,\n * \t\"demographics\": {\n * \t\t\"population\": 1.752\n * \t}\n * }, {\n * \t\"city\": \"Florianópolis\",\n * \t\"temperature\": 86,\n * \t\"demographics\": {\n * \t\t\"population\": 0.249\n * \t}\n * }];\n *\n * cities.reduce(toLargestProp(\"temperature\"));\n * // => { \"city\": \"Rio de Janeiro\", [...] }\n *\n * cities.reduce(toLargestProp(\"demographics.population\"));\n * // => { \"city\": \"São Paulo\", [...] }\n */","meta":{"range":[1236,1385],"filename":"toLargestProp.js","lineno":53,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100001571","name":"toLargestProp","type":"ArrowFunctionExpression"},"vars":{"":null}},"description":"When used with `[].reduce()`, returns\nthe object in an array in which a specific property\nhas the largest value.\n\nIf two or more results are found, the first one\nis returned.\n\nNote that the function expects the reduced array to be\nformed by objects with the same set of properties.","tags":[{"originalTitle":"category","title":"category","text":"Reduce","value":"Reduce"}],"params":[{"type":{"names":["string"]},"description":"The path to the property of an object.","name":"path"}],"returns":[{"type":{"names":["Object"]},"description":"The object in which a specific property has the largest value."}],"access":"public","examples":["let cities = [{\n\t\"city\": \"Rio de Janeiro\",\n\t\"temperature\": 96,\n\t\"demographics\": {\n\t\t\"population\": 6.32\n\t}\n}, {\n\t\"city\": \"São Paulo\",\n\t\"temperature\": 82.5,\n\t\"demographics\": {\n\t\t\"population\": 12.04\n\t}\n}, {\n\t\"city\": \"Curitiba\",\n\t\"temperature\": 70,\n\t\"demographics\": {\n\t\t\"population\": 1.752\n\t}\n}, {\n\t\"city\": \"Florianópolis\",\n\t\"temperature\": 86,\n\t\"demographics\": {\n\t\t\"population\": 0.249\n\t}\n}];\n\ncities.reduce(toLargestProp(\"temperature\"));\n// => { \"city\": \"Rio de Janeiro\", [...] }\n\ncities.reduce(toLargestProp(\"demographics.population\"));\n// => { \"city\": \"São Paulo\", [...] }"],"name":"toLargestProp","longname":"toLargestProp","kind":"function","scope":"global","___id":"T000002R000130","___s":true,"href":"tolargestprop","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `path` | String | The path to the property of an object. |"],"returnsTable":["| Type | Description |","| --- | --- |","| Object | The object in which a specific property has the largest value. |"],"signature":"toLargestProp (path)"},{"comment":"/**\n * When used with `[].reduce()`, returns\n * the object in an array in which a specific property\n * has the smallest property.\n *\n * If two or more results are found, the first one\n * is returned.\n *\n * Note that the function expects the reduced array to be\n * formed by objects with the same set of properties.\n *\n * @category Reduce\n *\n * @param {string} path The path to the property of an object.\n * @return {Object} The object in which a specific property has the smallest value.\n * @public\n *\n * @example\n * let cities = [{\n * \t\"city\": \"Rio de Janeiro\",\n * \t\"temperature\": 96,\n * \t\"demographics\": {\n * \t\t\"population\": 6.32\n * \t}\n * }, {\n * \t\"city\": \"São Paulo\",\n * \t\"temperature\": 82.5,\n * \t\"demographics\": {\n * \t\t\"population\": 12.04\n * \t}\n * }, {\n * \t\"city\": \"Curitiba\",\n * \t\"temperature\": 70,\n * \t\"demographics\": {\n * \t\t\"population\": 1.752\n * \t}\n * }, {\n * \t\"city\": \"Florianópolis\",\n * \t\"temperature\": 86,\n * \t\"demographics\": {\n * \t\t\"population\": 0.249\n * \t}\n * }];\n *\n * cities.reduce(toSmallestProp(\"temperature\"));\n * // => { \"city\": \"Curitiba\", [...] }\n *\n * cities.reduce(toSmallestProp(\"demographics.population\"));\n * // => { \"city\": \"Florianópolis\", [...] }\n */","meta":{"range":[1241,1391],"filename":"toSmallestProp.js","lineno":53,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100001603","name":"toSmallestProp","type":"ArrowFunctionExpression"},"vars":{"":null}},"description":"When used with `[].reduce()`, returns\nthe object in an array in which a specific property\nhas the smallest property.\n\nIf two or more results are found, the first one\nis returned.\n\nNote that the function expects the reduced array to be\nformed by objects with the same set of properties.","tags":[{"originalTitle":"category","title":"category","text":"Reduce","value":"Reduce"}],"params":[{"type":{"names":["string"]},"description":"The path to the property of an object.","name":"path"}],"returns":[{"type":{"names":["Object"]},"description":"The object in which a specific property has the smallest value."}],"access":"public","examples":["let cities = [{\n\t\"city\": \"Rio de Janeiro\",\n\t\"temperature\": 96,\n\t\"demographics\": {\n\t\t\"population\": 6.32\n\t}\n}, {\n\t\"city\": \"São Paulo\",\n\t\"temperature\": 82.5,\n\t\"demographics\": {\n\t\t\"population\": 12.04\n\t}\n}, {\n\t\"city\": \"Curitiba\",\n\t\"temperature\": 70,\n\t\"demographics\": {\n\t\t\"population\": 1.752\n\t}\n}, {\n\t\"city\": \"Florianópolis\",\n\t\"temperature\": 86,\n\t\"demographics\": {\n\t\t\"population\": 0.249\n\t}\n}];\n\ncities.reduce(toSmallestProp(\"temperature\"));\n// => { \"city\": \"Curitiba\", [...] }\n\ncities.reduce(toSmallestProp(\"demographics.population\"));\n// => { \"city\": \"Florianópolis\", [...] }"],"name":"toSmallestProp","longname":"toSmallestProp","kind":"function","scope":"global","___id":"T000002R000132","___s":true,"href":"tosmallestprop","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `path` | String | The path to the property of an object. |"],"returnsTable":["| Type | Description |","| --- | --- |","| Object | The object in which a specific property has the smallest value. |"],"signature":"toSmallestProp (path)"},{"comment":"/**\n * When used with `[].reduce()`, returns\n * the sum of the values in an array.\n *\n * Note that reducing arrays with non-numeric values\n * using `toSum()` can lead to unexpected results.\n * Also, note that the parentheses can be ommited.\n *\n * @category Reduce\n *\n * @return {number} The sum of the values in an array.\n * @public\n *\n * @example\n * [3, 5, 7, 9].reduce(toSum());\n * // => 24\n *\n * [3, 5, 7, 9].reduce(toSum);\n * // => 24\n */","meta":{"range":[449,578],"filename":"toSum.js","lineno":21,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100001631","name":"toSum","type":"ArrowFunctionExpression"},"vars":{"func":"toSum~func","":null}},"description":"When used with `[].reduce()`, returns\nthe sum of the values in an array.\n\nNote that reducing arrays with non-numeric values\nusing `toSum()` can lead to unexpected results.\nAlso, note that the parentheses can be ommited.","tags":[{"originalTitle":"category","title":"category","text":"Reduce","value":"Reduce"}],"returns":[{"type":{"names":["number"]},"description":"The sum of the values in an array."}],"access":"public","examples":["[3, 5, 7, 9].reduce(toSum());\n// => 24\n\n[3, 5, 7, 9].reduce(toSum);\n// => 24"],"name":"toSum","longname":"toSum","kind":"function","scope":"global","params":[],"___id":"T000002R000134","___s":true,"href":"tosum","paramsTable":["|  |","|  |"],"returnsTable":["| Type | Description |","| --- | --- |","| Number | The sum of the values in an array. |"],"signature":"toSum ()"}]},{"name":"Sort","href":"sort","items":[{"comment":"/**\n * When used with `[].sort()`, sorts\n * the array in ascending alphabetical order.\n *\n * Note that the parentheses can be ommited.\n *\n * @category Sort\n * \n * @return {Array} The array in ascending alphabetical order.\n *\n * @example\n * let musqueteers = [\"Athos\", \"Porthos\", \"Aramis\"];\n * \n * musqueteers.sort(byAlphabeticalOrder());\n * // => [\"Aramis\", \"Athos\", \"Porthos\"]\n *\n * musqueteers.sort(byAlphabeticalOrder);\n * // => [\"Aramis\", \"Athos\", \"Porthos\"]\n */","meta":{"range":[543,649],"filename":"byAlphabeticalOrder.js","lineno":22,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100000120","name":"byAlphabeticalOrder","type":"ArrowFunctionExpression"}},"description":"When used with `[].sort()`, sorts\nthe array in ascending alphabetical order.\n\nNote that the parentheses can be ommited.","tags":[{"originalTitle":"category","title":"category","text":"Sort","value":"Sort"}],"returns":[{"type":{"names":["Array"]},"description":"The array in ascending alphabetical order."}],"examples":["let musqueteers = [\"Athos\", \"Porthos\", \"Aramis\"];\n\nmusqueteers.sort(byAlphabeticalOrder());\n// => [\"Aramis\", \"Athos\", \"Porthos\"]\n\nmusqueteers.sort(byAlphabeticalOrder);\n// => [\"Aramis\", \"Athos\", \"Porthos\"]"],"name":"byAlphabeticalOrder","longname":"byAlphabeticalOrder","kind":"function","scope":"global","params":[],"___id":"T000002R000012","___s":true,"href":"byalphabeticalorder","paramsTable":["|  |","|  |"],"returnsTable":["| Type | Description |","| --- | --- |","| Array | The array in ascending alphabetical order. |"],"signature":"byAlphabeticalOrder ()"},{"comment":"/**\n * When used with `[].sort()`, returns an array of\n * objects sorted by one or more criteria, passed as\n * parameters.\n *\n * Each parameter can be eitheir a path to an object\n * property, passed as a string, or an object containing\n * a path to an object property, a boolean value indicating\n * if the result should be reversed, and a function to\n * process each value before sorting.\n *\n * @category Sort\n * \n * @param  {...(string|SortField)} ...fields The criteria used to sort the array of objects.\n * @return {Array.<Object>} The resulting array.\n *\n * @example\n * let places = [{\n * \t\"name\": \"Ipanema\",\n * \t\"location\": {\n * \t\t\"city\": \"Rio de Janeiro\",\n * \t\t\"state\": \"RJ\"\n * \t}\n * }, {\n * \t\"name\": \"Pedras\",\n * \t\"location\": {\n * \t\t\"city\": \"Búzios\",\n * \t\t\"state\": \"RJ\"\n * \t}\n * }, {\n * \t\"name\": \"Morumbi\",\n * \t\"location\": {\n * \t\t\"city\": \"São Paulo\",\n * \t\t\"state\": \"SP\"\n * \t}\n * }];\n *\n * places.sort(byProps(\"name\"));\n * // Sorts places by name\n * // => [\n * // =>\t{ \"name\": \"Ipanema\", [...] },\n * // =>\t{ \"name\": \"Morumbi\", [...] },\n * // =>\t{ \"name\": \"Pedras\", [...] }\n * // => ]\n *\n * places.sort(byProps({ \"path\": \"name\", \"reverse\": true });\n * // Sorts places by name in reversed order\n * // => [\n * // =>\t{ \"name\": \"Pedras\", [...] },\n * // =>\t{ \"name\": \"Morumbi\", [...] },\n * // =>\t{ \"name\": \"Ipanema\", [...] }\n * // => ]\n *\n * places.sort(byProps(\"location.state\", \"location.city\", \"name\"));\n * // Sorts places by state, city and name\n * // => [\n * // =>\t{ \"name\": \"Pedras\", [...] },\n * // =>\t{ \"name\": \"Ipanema\", [...] },\n * // =>\t{ \"name\": \"Morumbi\", [...] }\n * // => ]\n *\n * places.sort(byProps({ \"path\": \"location.state\", \"reverse\": true }, \"location.city\", \"name\"));\n * // Sorts places by state (in reversed order), city and name\n * // => [\n * // =>\t{ \"name\": \"Morumbi\", [...] },\n * // =>\t{ \"name\": \"Pedras\", [...] },\n * // =>\t{ \"name\": \"Ipanema\", [...] }\n * // => ]\n *\n * @example\n * let numbers = [{\n * \t\"value\": 35\n * }, {\n * \t\"value\": -20\n * }, {\n * \t\"value\": 3\n * }, {\n * \t\"value\": 0.8\n * }];\n *\n * numbers.sort(byProps(\"value\"));\n * // Sorts numbers by value in ascending order\n * // => [{ \"value\": -20 }, { \"value\": 0.8 }, { \"value\": 3 }, { \"value\": 35 }]\n *\n * numbers.sort(byProps({ \"path\": \"value\", \"primer\": Math.abs }));\n * // Sorts numbers by value in ascending order but ignoring the minus sign\n * // => [{ \"value\": 0.8 }, { \"value\": 3 }, { \"value\": -20 }, { \"value\": 35 }]\n */","meta":{"range":[2877,3054],"filename":"byProps.js","lineno":100,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100000153","name":"byProps","type":"ArrowFunctionExpression"}},"description":"When used with `[].sort()`, returns an array of\nobjects sorted by one or more criteria, passed as\nparameters.\n\nEach parameter can be eitheir a path to an object\nproperty, passed as a string, or an object containing\na path to an object property, a boolean value indicating\nif the result should be reversed, and a function to\nprocess each value before sorting.","tags":[{"originalTitle":"category","title":"category","text":"Sort","value":"Sort"}],"params":[{"type":{"names":["string","SortField"]},"variable":true,"description":"The criteria used to sort the array of objects.","name":"...fields"}],"returns":[{"type":{"names":["Array.<Object>"]},"description":"The resulting array."}],"examples":["let places = [{\n\t\"name\": \"Ipanema\",\n\t\"location\": {\n\t\t\"city\": \"Rio de Janeiro\",\n\t\t\"state\": \"RJ\"\n\t}\n}, {\n\t\"name\": \"Pedras\",\n\t\"location\": {\n\t\t\"city\": \"Búzios\",\n\t\t\"state\": \"RJ\"\n\t}\n}, {\n\t\"name\": \"Morumbi\",\n\t\"location\": {\n\t\t\"city\": \"São Paulo\",\n\t\t\"state\": \"SP\"\n\t}\n}];\n\nplaces.sort(byProps(\"name\"));\n// Sorts places by name\n// => [\n// =>\t{ \"name\": \"Ipanema\", [...] },\n// =>\t{ \"name\": \"Morumbi\", [...] },\n// =>\t{ \"name\": \"Pedras\", [...] }\n// => ]\n\nplaces.sort(byProps({ \"path\": \"name\", \"reverse\": true });\n// Sorts places by name in reversed order\n// => [\n// =>\t{ \"name\": \"Pedras\", [...] },\n// =>\t{ \"name\": \"Morumbi\", [...] },\n// =>\t{ \"name\": \"Ipanema\", [...] }\n// => ]\n\nplaces.sort(byProps(\"location.state\", \"location.city\", \"name\"));\n// Sorts places by state, city and name\n// => [\n// =>\t{ \"name\": \"Pedras\", [...] },\n// =>\t{ \"name\": \"Ipanema\", [...] },\n// =>\t{ \"name\": \"Morumbi\", [...] }\n// => ]\n\nplaces.sort(byProps({ \"path\": \"location.state\", \"reverse\": true }, \"location.city\", \"name\"));\n// Sorts places by state (in reversed order), city and name\n// => [\n// =>\t{ \"name\": \"Morumbi\", [...] },\n// =>\t{ \"name\": \"Pedras\", [...] },\n// =>\t{ \"name\": \"Ipanema\", [...] }\n// => ]","let numbers = [{\n\t\"value\": 35\n}, {\n\t\"value\": -20\n}, {\n\t\"value\": 3\n}, {\n\t\"value\": 0.8\n}];\n\nnumbers.sort(byProps(\"value\"));\n// Sorts numbers by value in ascending order\n// => [{ \"value\": -20 }, { \"value\": 0.8 }, { \"value\": 3 }, { \"value\": 35 }]\n\nnumbers.sort(byProps({ \"path\": \"value\", \"primer\": Math.abs }));\n// Sorts numbers by value in ascending order but ignoring the minus sign\n// => [{ \"value\": 0.8 }, { \"value\": 3 }, { \"value\": -20 }, { \"value\": 35 }]"],"name":"byProps","longname":"byProps","kind":"function","scope":"global","___id":"T000002R000015","___s":true,"href":"byprops","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `...fields` | String<br>SortField | The criteria used to sort the array of objects. |"],"returnsTable":["| Type | Description |","| --- | --- |","| Array.&lt;Object&gt; | The resulting array. |"],"signature":"byProps (...fields)","typedefParams":["SortField"]}]},{"name":"String","href":"string","items":[{"comment":"/**\n * Returns the string formed by the characters **after\n * the first occurrence** of the delimiter in a base string.\n * If the delimiter is not found, the function returns `undefined`.\n *\n * @category String\n * \n * @param  {string} str The base string.\n * @param  {string} delimiter The delimiter string.\n * @return {string}\n * @public\n *\n * @example\n * afterFirst(\"parallelepiped\", \"le\");\n * // => \"lepiped\"\n */","meta":{"range":[494,579],"filename":"afterFirst.js","lineno":19,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100000040","name":"afterFirst","type":"ArrowFunctionExpression"}},"description":"Returns the string formed by the characters **after\nthe first occurrence** of the delimiter in a base string.\nIf the delimiter is not found, the function returns `undefined`.","tags":[{"originalTitle":"category","title":"category","text":"String","value":"String"}],"params":[{"type":{"names":["string"]},"description":"The base string.","name":"str"},{"type":{"names":["string"]},"description":"The delimiter string.","name":"delimiter"}],"returns":[{"type":{"names":["string"]}}],"access":"public","examples":["afterFirst(\"parallelepiped\", \"le\");\n// => \"lepiped\""],"name":"afterFirst","longname":"afterFirst","kind":"function","scope":"global","___id":"T000002R000004","___s":true,"href":"afterfirst","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `str` | String | The base string. |","| `delimiter` | String | The delimiter string. |"],"returnsTable":["| Type |","| --- |","| String |"],"signature":"afterFirst (str, delimiter)"},{"comment":"/**\n * Returns the string formed by the characters **after\n * the last occurrence** of the delimiter in a base string.\n * If the delimiter is not found, the function returns `undefined`.\n *\n * @category String\n * \n * @param  {string} str The base string.\n * @param  {string} delimiter The delimiter string.\n * @return {string}\n * @public\n *\n * @example\n * afterLast(\"parallelepiped\", \"le\");\n * // => \"piped\"\n */","meta":{"range":[490,573],"filename":"afterLast.js","lineno":19,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100000060","name":"afterLast","type":"ArrowFunctionExpression"}},"description":"Returns the string formed by the characters **after\nthe last occurrence** of the delimiter in a base string.\nIf the delimiter is not found, the function returns `undefined`.","tags":[{"originalTitle":"category","title":"category","text":"String","value":"String"}],"params":[{"type":{"names":["string"]},"description":"The base string.","name":"str"},{"type":{"names":["string"]},"description":"The delimiter string.","name":"delimiter"}],"returns":[{"type":{"names":["string"]}}],"access":"public","examples":["afterLast(\"parallelepiped\", \"le\");\n// => \"piped\""],"name":"afterLast","longname":"afterLast","kind":"function","scope":"global","___id":"T000002R000006","___s":true,"href":"afterlast","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `str` | String | The base string. |","| `delimiter` | String | The delimiter string. |"],"returnsTable":["| Type |","| --- |","| String |"],"signature":"afterLast (str, delimiter)"},{"comment":"/**\n * Returns the string formed by the characters **before\n * the first occurrence** of the delimiter in a base string.\n * If the delimiter is not found, the function returns `undefined`.\n *\n * @category String\n *\n * @param  {string} str The base string.\n * @param  {string} delimiter The delimiter string.\n * @return {string}\n * @public\n *\n * @example\n * beforeFirst(\"parallelepiped\", \"le\");\n * // => \"paral\"\n */","meta":{"range":[493,580],"filename":"beforeFirst.js","lineno":19,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100000080","name":"beforeFirst","type":"ArrowFunctionExpression"}},"description":"Returns the string formed by the characters **before\nthe first occurrence** of the delimiter in a base string.\nIf the delimiter is not found, the function returns `undefined`.","tags":[{"originalTitle":"category","title":"category","text":"String","value":"String"}],"params":[{"type":{"names":["string"]},"description":"The base string.","name":"str"},{"type":{"names":["string"]},"description":"The delimiter string.","name":"delimiter"}],"returns":[{"type":{"names":["string"]}}],"access":"public","examples":["beforeFirst(\"parallelepiped\", \"le\");\n// => \"paral\""],"name":"beforeFirst","longname":"beforeFirst","kind":"function","scope":"global","___id":"T000002R000008","___s":true,"href":"beforefirst","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `str` | String | The base string. |","| `delimiter` | String | The delimiter string. |"],"returnsTable":["| Type |","| --- |","| String |"],"signature":"beforeFirst (str, delimiter)"},{"comment":"/**\n * Returns the string formed by the characters **before\n * the last occurrence** of the delimiter in a base string.\n * If the delimiter is not found, the function returns `undefined`.\n *\n * @category String\n *\n * @param  {string} str The base string.\n * @param  {string} delimiter The delimiter string.\n * @return {string}\n * @public\n *\n * @example\n * beforeLast(\"parallelepiped\", \"le\");\n * // => \"paralle\"\n */","meta":{"range":[493,578],"filename":"beforeLast.js","lineno":19,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100000100","name":"beforeLast","type":"ArrowFunctionExpression"}},"description":"Returns the string formed by the characters **before\nthe last occurrence** of the delimiter in a base string.\nIf the delimiter is not found, the function returns `undefined`.","tags":[{"originalTitle":"category","title":"category","text":"String","value":"String"}],"params":[{"type":{"names":["string"]},"description":"The base string.","name":"str"},{"type":{"names":["string"]},"description":"The delimiter string.","name":"delimiter"}],"returns":[{"type":{"names":["string"]}}],"access":"public","examples":["beforeLast(\"parallelepiped\", \"le\");\n// => \"paralle\""],"name":"beforeLast","longname":"beforeLast","kind":"function","scope":"global","___id":"T000002R000010","___s":true,"href":"beforelast","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `str` | String | The base string. |","| `delimiter` | String | The delimiter string. |"],"returnsTable":["| Type |","| --- |","| String |"],"signature":"beforeLast (str, delimiter)"}]},{"name":"Time","href":"time","items":[{"comment":"/**\n * Returns the time passed since a timestamp, in milliseconds;\n *\n * @category Time\n * @param  {number} timestamp The time stamp.\n * @return {number} Time passed since the timestamp, in milliseconds.\n *\n * @example\n * let timestamp = +new Date(),\n * \tresult = 0;\n * \n * setTimeout(() => {\n * \tresult = timeSince(timestamp);\n * }, 150);\n *\n * result;\n * // => 150\n * // This value is approximate and may vary.\n */","meta":{"range":[423,529],"filename":"timeSince.js","lineno":20,"columnno":6,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{"id":"astnode100001330","name":"timeSince","type":"ArrowFunctionExpression"}},"description":"Returns the time passed since a timestamp, in milliseconds;","tags":[{"originalTitle":"category","title":"category","text":"Time","value":"Time"}],"params":[{"type":{"names":["number"]},"description":"The time stamp.","name":"timestamp"}],"returns":[{"type":{"names":["number"]},"description":"Time passed since the timestamp, in milliseconds."}],"examples":["let timestamp = +new Date(),\n\tresult = 0;\n\nsetTimeout(() => {\n\tresult = timeSince(timestamp);\n}, 150);\n\nresult;\n// => 150\n// This value is approximate and may vary."],"name":"timeSince","longname":"timeSince","kind":"function","scope":"global","___id":"T000002R000116","___s":true,"href":"timesince","paramsTable":["| Name | Type | Description |","| --- | --- | --- |","| `timestamp` | Number | The time stamp. |"],"returnsTable":["| Type | Description |","| --- | --- |","| Number | Time passed since the timestamp, in milliseconds. |"],"signature":"timeSince (timestamp)"}]}],"typedefs":[{"comment":"/**\n * @typedef {Object} SortField\n * @property {string} path The path to the property of an object.\n * @property {Function} [primer] The function used to process each value before sorting.\n * @property {boolean} [reverse] Whether the result should be reversed.\n */","meta":{"filename":"byProps.js","lineno":5,"columnno":0,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{}},"kind":"typedef","name":"SortField","type":{"names":["Object"]},"properties":[{"type":{"names":["string"]},"description":"The path to the property of an object.","name":"path"},{"type":{"names":["function"]},"optional":true,"description":"The function used to process each value before sorting.","name":"primer"},{"type":{"names":["boolean"]},"optional":true,"description":"Whether the result should be reversed.","name":"reverse"}],"longname":"SortField","scope":"global","___id":"T000002R000014","___s":true,"nameCapitalized":"SortField","propertiesTable":["| Name | Type | Description |","| --- | --- | --- |","| `path` | String | The path to the property of an object. |","| `primer` | Function | The function used to process each value before sorting. **optional** |","| `reverse` | Boolean | Whether the result should be reversed. **optional** |"]},{"comment":"/**\n * @typedef {Object} ClippingObject\n * @property {boolean} isOffTop Above and off the mask.\n * @property {boolean} isOffBottom Below and off the mask.\n * @property {boolean} isOffLeft On the left and off the mask.\n * @property {boolean} isOffRight On the right and off the mask.\n * @property {boolean} isOff Off the mask.\n * @property {boolean} isClippedTop Above and intersecting with the mask.\n * @property {boolean} isClippedBottom Below and intersecting with the mask.\n * @property {boolean} isClippedLeft On the left and intersecting with the mask.\n * @property {boolean} isClippedRight On the right and intersecting with the mask.\n * @property {boolean} isClipped Intersecting with the mask.\n * @property {boolean} isFullyVisible Fully visible inside the mask.\n * @property {boolean} isPartiallyVisible Alias for `isClipped`.\n * @property {boolean} isInvisible Alias for `isOff`.\n * @property {boolean} isAsVisibleAsPossible As visible as possible (the element is taller or wider than the mask).\n * @property {boolean} isNotAsVisibleAsPossible Not as visible as possible (the element is taller or wider than the mask).\n */","meta":{"filename":"getClippingInfo.js","lineno":6,"columnno":0,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{}},"kind":"typedef","name":"ClippingObject","type":{"names":["Object"]},"properties":[{"type":{"names":["boolean"]},"description":"Above and off the mask.","name":"isOffTop"},{"type":{"names":["boolean"]},"description":"Below and off the mask.","name":"isOffBottom"},{"type":{"names":["boolean"]},"description":"On the left and off the mask.","name":"isOffLeft"},{"type":{"names":["boolean"]},"description":"On the right and off the mask.","name":"isOffRight"},{"type":{"names":["boolean"]},"description":"Off the mask.","name":"isOff"},{"type":{"names":["boolean"]},"description":"Above and intersecting with the mask.","name":"isClippedTop"},{"type":{"names":["boolean"]},"description":"Below and intersecting with the mask.","name":"isClippedBottom"},{"type":{"names":["boolean"]},"description":"On the left and intersecting with the mask.","name":"isClippedLeft"},{"type":{"names":["boolean"]},"description":"On the right and intersecting with the mask.","name":"isClippedRight"},{"type":{"names":["boolean"]},"description":"Intersecting with the mask.","name":"isClipped"},{"type":{"names":["boolean"]},"description":"Fully visible inside the mask.","name":"isFullyVisible"},{"type":{"names":["boolean"]},"description":"Alias for `isClipped`.","name":"isPartiallyVisible"},{"type":{"names":["boolean"]},"description":"Alias for `isOff`.","name":"isInvisible"},{"type":{"names":["boolean"]},"description":"As visible as possible (the element is taller or wider than the mask).","name":"isAsVisibleAsPossible"},{"type":{"names":["boolean"]},"description":"Not as visible as possible (the element is taller or wider than the mask).","name":"isNotAsVisibleAsPossible"}],"longname":"ClippingObject","scope":"global","___id":"T000002R000043","___s":true,"nameCapitalized":"ClippingObject","propertiesTable":["| Name | Type | Description |","| --- | --- | --- |","| `isOffTop` | Boolean | Above and off the mask. |","| `isOffBottom` | Boolean | Below and off the mask. |","| `isOffLeft` | Boolean | On the left and off the mask. |","| `isOffRight` | Boolean | On the right and off the mask. |","| `isOff` | Boolean | Off the mask. |","| `isClippedTop` | Boolean | Above and intersecting with the mask. |","| `isClippedBottom` | Boolean | Below and intersecting with the mask. |","| `isClippedLeft` | Boolean | On the left and intersecting with the mask. |","| `isClippedRight` | Boolean | On the right and intersecting with the mask. |","| `isClipped` | Boolean | Intersecting with the mask. |","| `isFullyVisible` | Boolean | Fully visible inside the mask. |","| `isPartiallyVisible` | Boolean | Alias for `isClipped`. |","| `isInvisible` | Boolean | Alias for `isOff`. |","| `isAsVisibleAsPossible` | Boolean | As visible as possible (the element is taller or wider than the mask). |","| `isNotAsVisibleAsPossible` | Boolean | Not as visible as possible (the element is taller or wider than the mask). |"]},{"comment":"/**\n * @typedef {Object} BemObject\n * @property {Object} name An object which key is a BEM block or element, e.g. `menu` or `landing__area`.\n * @property {Object} name.modifier An object representing a modifiers and their values, e.g.&nbsp;`{active: false}` or `{level: 42}`.\n */","meta":{"filename":"modifyBemClass.js","lineno":4,"columnno":0,"path":"/Users/leonardofavre/Trabalho/canivete/dist","code":{}},"kind":"typedef","name":"BemObject","type":{"names":["Object"]},"properties":[{"type":{"names":["Object"]},"description":"An object which key is a BEM block or element, e.g. `menu` or `landing__area`.","name":"name"},{"type":{"names":["Object"]},"description":"An object representing a modifiers and their values, e.g.&nbsp;`{active: false}` or `{level: 42}`.","name":"name.modifier"}],"longname":"BemObject","scope":"global","___id":"T000002R000094","___s":true,"nameCapitalized":"BemObject","propertiesTable":["| Name | Type | Description |","| --- | --- | --- |","| `name` | Object | An object which key is a BEM block or element, e.g. `menu` or `landing__area`. |","| `name.modifier` | Object | An object representing a modifiers and their values, e.g.&nbsp;`{active: false}` or `{level: 42}`. |"]}]}